%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: crime_on_gdp.dvi
%%CreationDate: Fri Dec 18 14:32:07 2020
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMB10 CMR12 CMR8 CMTI12 CMBXTI10 CMR7 CMR10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o crime_on_gdp.ps
%+ crime_on_gdp.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.12.18:1421
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 23 2020-09-18 06:29:04Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.32, 2020/09/18
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%

revision 952 gt 
{
  systemdict /.setalphaisshape known not
  {
    (\n\n%%%% WARNING: Transparency operations ignored - need to use -dALLOWPSTRANSPARENCY\n\n) print flush
    /.pushpdf14devicefilter {pop} bind def
    /.begintransparencygroup {pop pop pop pop pop} bind def
    /.endtransparencygroup {} bind def
    /.poppdf14devicefilter {} bind def
    /.setfillconstantalpha {pop} bind def
    /.setstrokeconstantalpha {pop} bind def
    /PageUsesTransparency false def
  }
  {
    systemdict /.setopacityalpha known not 
      { systemdict /.setfillconstantalpha known { /.setopacityalpha /.setfillconstantalpha load def } { /.setopacityalpha { pop } def } ifelse } if
    systemdict /.setblendmode known not { /.setblendmode { pop } def } if
    systemdict /.setshapealpha known not 
      { systemdict /.setstrokeconstantalpha known { /.setshapealpha {dup .setfillconstantalpha .setstrokeconstantalpha true .setalphaisshape } def } { /.setshapealpha { pop } def } ifelse } if
  } ifelse
}
{
  systemdict /.setopacityalpha known not 
  { 
    (\n\n%%%% WARNING: Transparency operations ignored - need to use -dNOSAFER\n\n) print flush
    /.setopacityalpha { pop } bind def 
    /.setshapealpha { pop } bind def 
  } if
} ifelse

%%<bool> .setalphaisshape -
%%    If true, the values set by setstrokeconstantalpha and setfillconstantalpha are interpreted as shape values. The initial value of the AIS flag is false. 

%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
/color.sc { } def
/color.fc { } def
TeXDict begin
/TeXcolorseparation { setcolor } def
end
true setglobal
/pdf.globaldict 4 dict def
false setglobal
/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 37 /percent put
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 53 /five put
dup 68 /D put
dup 70 /F put
dup 71 /G put
dup 74 /J put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA7120F8F3A8E42134F1B6B0C248D56F247AA68FB941839F600F61C
14247EFF780BBA3E5198D37CED44DEEB724B0AF63F7CAE541F6D0929A26F94B4
70854622B3743ACA2E94BFD25A4D7BD9FE7580E9094A930ECE7390AFEB6F7F9E
6309A71C82A089CD2DF10E4B6FEA7C1D4EAD89507E04EFB96476A3B4A2511E21
0281580F05E4DA3F302D70B39BFD629F0E84B5F49F3C7EB35E06463312D48584
EA1598B47E90268D1730DAB61BC9F0AF8D53B79FF544DE3895D40533BF778802
B0BC8B9D7D5CD3605725B6726E89B468FAEA7A34B379477511525AB06AB808EA
664CD7343EF836E5579CBD328E22D526F4F9EA6E2CA80C7F8D8D15B325EBED86
B1CFEEC79F098182DC77880F7443289E6E8B0FC127B397E75CD3BA66EA1C024F
C80466EBFBDB0F04B473097B6947C6C7E144918FF662A5EE19C1360B5ACB813F
E999FD0DAA5FA394260A3496C4C35E5FAEEDE6A3DF250A7F579C8A4DD8D901A5
B598D721639E2A82FC866B6E690D7804DE2809825F71D5DD1A1A289CC9216E51
B36BF9A69D0DA22D0C87E46ED1BE94E17E5C4E5594A016F228285B627BE31FE6
BEC3F374AE853CB3E51CEEC3D80A0B26AB9BB8BF1CDE1E8C0AC9B9CF49F1E25F
0F633FA842B9DF64946EA241FAF1EDF50092203DF01B341A01D47A5FFCC91ED4
B7E13900CB00E970CB5F8A6B538B4F5CB6DA9FA3FFBB481C9AFF1455A030651D
3C420526F9A0BB461B4C6C0582F6DF048C003250F71F1E219545FA3A158EB854
72FDE51BCDE1D62CF8B04888664F82675A3DD3ED0601E5F8D083AF733D0DF339
7CFDC94CCC44A38C2CE2AC5E22AB57C488C7193CAC7E399A667E12B07C65D791
72DF1A3287C67CF97056490ECBF3CF7E895CEA09ADA6DD8B41401AD9A35D102F
08539172F17BB29C5DBB42FA21CD2C5EEC8DF04F6E80B5B84E9915556AE75ADA
36C34BA5C3B4C8EC8F142E770A1C5F6FA98F6E6E37B1F14996DA6E6D3171A69B
2D426181910E8EA5EBF6D1D7FE9FCCBDB2D359C73EB3C1D3DDECC35F0FD59D0C
EB1B38BE310283619DCD7B2DFDC9DCC814084EDBCA0C8639199BFCD1C4FF3CE4
851D494EF97D357057B13845B2A5C1CDE2B37C804F50577B6D1308DD9C414C5C
10F745F2E3EE3C0F379E76451D99AA82119E8EEFA1AFD59FF3D815B045C9B64F
FB8DAF846931370FF1C447C4AD00B46C36448FE2DB35CB45276DFB339097EF8B
8F63EDB1A7A1071CCC95F1BEF5575845458CAE828E314F00667EAAEC2C345682
D0FF38A299DFE956C8FE085053AC0F9DA8631B105AAD8F008A01EC4B9D2025D7
0E6B8EBD99C329696816083D2B0EA39D6CA2C2853AC775E11BBA1D0821C1D35D
746E13EB000DAD73C64C1936A32DA881E68915F8A4CC2C4F53BE2B394825D784
4127EE35AF963BAD307B89736A25089ACB08A44D989D0196245AB6006AB61418
3D65F85F32539E42C3C0D7EE148C9CA55C4E1266920A10EF9A7C4E0857D24B6C
2122E46AC6B0E7385772BF2F1223E86FCC594E01D7232A2F3F586D7E833F3C54
A4A5A823A88CE799D1CF5A361D87D4BB2CB9DC94FA0A1658D67EA9EB2987B681
097C3D2AA5F4C904C19B7456A8B0A48C612976A3E55650C0C3B81737C97F1F9E
100F6E46490A01F567FFAABCEB0DBC0E751FCD129C9B0AD4E5AE7A217D8E4D50
D622ABBE9EDE8657E6ACEEB25CAD1B04B8F525BB56A5C7FA6D03D9CBD707BEAE
56305A4C5B4A20F21BF2C2300C67B3EECA7C1BDCA7EE799615F84979254CE3CF
8764FDEFC91D478DF4B378B9D68EACA5C6852B2C9E62FED06821321AF0C0320F
E67D51ABE9ABDF14ADB2CAE424F58D771229C2A3A46133A63065854C6C250DE8
935B9099D2925F1E4BB1796DE666D9439695896C50EAC2E2D8B6294F2A0C3175
54278CE3A09B23D3C0C90AFC67FED6D069F7ABE64B951812CC86D7045E3BCB1A
E8B9A31FACB97C53FED8424926BC0C2BBE33F8A8F65CFF1A4F8BA05BFBB10CF4
FC2640AD8D14A49BB0D8CC557888A81813533DB5271AFCF83EA09EC1FED6A31E
8789F3A05B1B285D6393AC236D183C46DCD9203F5C5B84BFCB2C9DDD77BDFED2
C8049AAA8B20EF3367BEBCD4324343C32FCEB3B0723061CD74ECE87BA35DFF66
AD6DDEEFE4DFBE9C0586C3DD61F8B754C7582A8C0CE8935D7A09539BB1E313BA
CC96EF30AAFDF55A1879CCD2825C1A832FD28AE7F2FDA0209891F3BA54CBC86A
5ECF1706A73170083F665AB4A2C76F1636F7691C4F145D33BE72415177BE8572
73CE752F2D3CF766AF7FD790D13F8F184839BF574603B23DDE1C54306AB89C1B
289D953CE4BE1B7242A48A0E6B71B28F0FA5A180E985A20A6A6C78F5AE5269FA
4BE3E7B107A1734642053D6887F8DF82D0D84D0E0B99B789736594D7F6C77E24
976F92FB632CEBD691C1F29AFD52CB18BD258ADFB0B4B7F929A5A93AB284FAE1
FEB947456FCBF744DB153CAE0225CA9207989B29B743721932EEDBABCD1E705A
78D48AD4A103B9856A3A4EC96DF3376C1C8EFFC9BCB6CD6B910687EACAE37CBC
CEC20CFE7A2187D2562E08B317B61D2F46FFA90F3460BB07D813AD50724816D7
6FE68F56E9F28192F22E3DDFDA2046878EB202D92E1A5C7AF653BD7EEF37B019
B338AC46D6388B8F81A407239D36D31E5808B8FC10A85952EEC8E2C5E604C244
888E8E07A76F1FE944D5B25AA962A9419127E391A832F303456025AE305BD09A
6D4C8623BA9D242CBAE6B1D0A098D0EBA5204F51014203021E481DF4FC81BB0E
DC41DFB168166E5BCDC33EFFFD392924E57ECB5A258A291051C18AD259CDCDE9
3654BB87A9482A58049F71949A126A4133807056A79E25470FE70239F9D2BAC3
8F97176DCBBB24F64AF6E45A2BFAEEEAE0357BF21CB34EDCE3D9FBABCE0118FC
DD6984405D8ED976F69A885768BF5ABED34B84B4AE6310FD0F789916694E7D4E
45AB6C1A4CAAC54F1F933DE26261340784322C59D5973CFC486571E4247095DF
C52BBCB0216EA14DDE19D11D1B13D0D488BDB61EE45F20777EC7952CD0DCC4B0
FD7120530577A08AF422188C97F6014AC665FC59F930C348CC49370AA3F656B4
5B56F1D869729A22714A5F0E7DB43CE31215A0DEACBB9D6FC1D2F72267DE7226
2C233FDE477E269B5EFE1F181D669DCEA326EA3BD38D5233A28463102193D450
A2EA72787167455B0BC940D1ADE3C4488AEDC5005E81BF78DA744D62D7C13499
5A4B13980A32F58BBF3BF5FAA2C6D304F21AD75B142D1C611E412EA0E589EEAF
048F3D5ECB94A50EEB20857303CF8EAE0241B9BBC5CA1ED26F6AFB595FB6C8DF
CDB8EA41B922D52FA70AFA1B2AEE0C6BB66C3156D77D6FBAED9302DD2DE9FEE2
1E8BE08DB17317346B2B30A5959A5FDE2E2231D15B50E936115410268E28689F
5468CD1FD3CC169750202E88E1811AECA8087DF92E794545C6DD05FBCD89F930
20AE8C27B83412A56F1A301328A65B9B839B86482E8CBC4E0E031400A97540E7
6DC70AC9760E734F4B9D83A0649A6EDC9D0EA060A4C64AB31414E542E097A1F9
1AF7FDF2EC1D383478131C83523D12CC40575D22C9F45C6C318520AE00E31AC2
4FDB1EADCF41189E67686D6DB4809FF48A43F94E0AA16CB738067677D248D09C
CC9ECDEE54A1C2FE264573127993143962401DEBA94A54B36AFFA205B5EF36E2
812285A3100DCDAE9C91C8900A3207EFA4B8BA56C65FAA99BBBEA2A071C745A8
585B3C98E43F0638801E3BA49914EED4098D5C55CFF1C1FB0E3ED103DD0AF44F
DE44EE3A47F141DCD0862F0191D972950D10A772FEB87157FAF1D9F2BB65C9C4
70891ACEF09F0CDBF9E7E7E19700ACFF7ECBBDB8E35F932234EC36A5D24385C5
444A0D51505825614BF8415362121C3B00E77410A768936D02C66D877F8C4396
F5D109A069E4FBC2468A956AEC81C038007B27F20812D0CDABB99352DA0C9307
5A458C165A15CD257F73BA24C122907BD67008C073F30B3130B91AE92A742BF4
458111CA7A6C4C07477C44915079363C4016B232C0F82413B700528EF3783830
C2000EAE9CE4DD44611533FC4224B59BD5E3AEA6AC2A299924AA11005E76807A
FE3A3C26E996483108EEEFD7CD056679F9DF6640C1F4ECFA9007FD8BF43C5504
3BE307CC2D62D6FDE9C2AF9AE8CB41B4624CAB869B2047EFB50C3442A722C9EA
E09DF4F7706CB62606B9754A77FAC80EDC838A38E328134A6A01842F37A281ED
283583C968EAD09F0B3A36770648A6C82E8AD09AD3AB0D2DD245B33CFEB27CD2
B40C04D9147E9EA76602DBBB9955C33F53238C87F9CBC7B394E78BE31B7974D0
012FB63501894F87A4958B7650DE2D0A9666FC7EF067186745E7E774CD6299F9
723D78A4089A7D633DA5B1D35DD74CD0812CA35AA85B47C48DA645CB111CF2B8
138EAB84DE92EE8A6D19471A425A79DAEB14A77C50B03C3D63989995F8A42030
A671613E0EF0F98C4BD0DA9577FEA99DD0E23BAC4F32F36BB1900F22155D5687
98E1A2928D27876D4C96EEEA677D84B6E36B265ED298B6DA2E5A34BE4F6A0CC9
85CA2D92652F541312BE5F577D3C901C134724AE1ADB55199809999909D0ACDF
235577B68003BA14A0ED4FAF625AADFBB9419F367344B681521CB94387B104BF
9077FABED1CC3AF4FD23F759FCF9BED94CBF003E7EDFC4EAB23F4D381C985DC4
673ADC8DA51DA7B6B65A002E73B5EE8C8BD8A2DFE75E50C53FFA048DF58FC734
58FD2423A38A81D4B1AC352EF3ACEA51A1AE9C1F2AB2A2F427A272F93039B025
2C2D428E4D67E37DD34EFDC5EF2B5D86012C58863FDB48AFFC6B059634F3DB89
0FA7929E438AC9E401A5B6ED83E6706840DD148024FB21C687EFBA232D3C1ECD
09BC0F83AC58CD8FCFA9D4DEDEF3FF86BF034B5075AF6134393D8B62C54EE0C2
4ED1ABEB5F9FB343A0FEAB6674AF590BBD7C719F3C3C148E70D1CCA9C3202383
676ED1A3DABEAE300004655AEC2C8C6208F4F84CAD741A9412B8D546365E8201
34419EEC5E7ACA650FBF75103A05410FE643F89E9C467452A77CEAEE799F7CD1
59332BECDFFAA3CACE48208EC34AC7113D46D947978F3AC3ECDAB93F8283C50D
65A3C5E0761ED373BFBAA500940F8F3CB73AFC78B5C98E0FB9233504C2F57527
B6B20F3D9276C5E5D07130436868816E4837D58D154D8E179D3F81A608380E76
E11EC1FB0569ED3A8321E37065F923E739767E6EE44A8B993B811B79D0E6D3EA
EF2239A803232E43C60D8C7BCB5B2D5432AA98CC0C073E0E4897AF25F3081DBA
9D931F18CE74A2AC0CB480BA3F1672CDE3B29C48C0D8170B10DD189E7E503EFC
9A084F2DF0D7EE842621AAEC04ACAE3DDCB88E9419D5A189FA19910C96B3A994
46E31CCCD84AC315F3C3D59E12110F1957CFA2945B79DD971F1747E3D6AA6D84
C86C03F6702F3F31235C5D297C25296790DB73B99DDA028ABD2C6F376EF9ED45
6A86F6016030A0DDDDFCEE3BD02D39A50FACD899DA855CBB59AF69D227A2EFC8
B6E5F037FF42C65EC4CDDB251FF5702B524682589085EDACDE359E313411DEB8
EE8C2699FE7C418DC3C4ECD4BFFD23609AF2E8BA6BDD545917AD579C435B045F
FC6167B933865552B6B9F998415791D38C84995821E7B929CBF59EFA7F27079B
F75C01F04A1BF5144A06B252057A68458D3352D4FFEF466654DD9D41ED748926
CA0E81B2363D2959F61D36FB27CAF77FD8B03C91A7E15CEB21BFFC746B5A8603
811C3604BE56A42BC946EAF8E4AD6F7734FA50FC306C0085C6558E23B013FED6
BA87F4863C6321744A1AEC0BA1A0CEDD46CFC00B9A615DFAF01E81707202089B
1BC247C6CCBDC2CBC76FA10DBA9FD950A59116A3994B2F8CFF16F0D46CCC6DAB
2C904E4A85E7625A5767F45BFC46CDBBBA79CB24506D7E02B6C974E2911F7E08
D1685152D02A769D896612D452C9D79BFCB1670A6458D5B64527851968D4C8D6
B145FF237E4E2133D84B45E9FFA1D7DE7D4DE8807719169B68DDD92053158062
6EA74ABAFECE063768C3B08B004C36D4DD797123E8D4603473B4169F533C3C4C
4245E7F22F534EA47129EFA1179E9CE490D2FD60139221049B5F98628A6B9A45
8F5CE3AF8F79242C717A669B0A41DCAB449BF83D39708B03C25A40B41C13B2FD
613F7241893DEEAB0AF671AF18B7FEA8E7F0C02CB0C3AB425AC551D115F513FE
940551725FF55F4507B6EAAD34322DFBC1A918A3A9B259B7019ACA31D27BB9E9
DF3C13A341F0BBF146F45C9AEF3C51A8B9ED02ECEA0D34682615BA5886B93CCD
65483B8503C501918C465F5868DF26240DAE5835FE6A319BE1413A0303A5D67D
1719B76F46A788934B0E9E265E69A633F8584B74E78F08450EC1921CD959CA13
DCF4CEF0D70CD47D454BB3F18B01EED57A52DE6618892A9798139652D66CD401
D3BE7BCE804DB4307B6A191CEE540B458A38558DA8C5A201E8254DD29CF32714
AB773F6DDD04596D35F313CEE5CEBE6E62305522516A76747A0DDE7187E723F2
03FCC03916E1477DCE8E2D87ED3A72C2E8EC2093000F8CF812BA8F24918AF5B1
8F0F9006D07193F023804E9A043B0543B6920B2A1A4C629DD41A2A26528E9A08
2107245319A7D3D354639C956094C21EF30FB9376B4C06EC1D0C6D930111931F
402C646FB1643B8C895E8BBB56D6E219A5C4C17EE4DBD0E6C0111D0C8C24800F
865AA68CAB77C931C37BC47E10244EF5A38E9EA42B536B1FE353851F3CDAFECF
B3D85D0B3FCD1C732AE2630DCBC27CE893CC021192663D4F593A057C241C5493
2B5EFA973DC5DCEF5603E05D309C1FB6EFAB07351F74AE235F1476F43A46876C
16B413FCEA414AAF9F9D419E26C71AEFF7BE0136AC98902765AB6AAFFCBF1ABF
D59B7FB54D0D66C0E7E3D995FBACDDAA5A2D8E1B5B82C1451DF813A8F2F0D9C0
A655646ED25D448E51A12B0A907FDE39BB71D5BE3D628A05970DB8B10171C24E
3575235947CEF2952E2289FCE0E0E2A0BDFE3D45C66EBD50744854956E577288
8103D1C9B5107E87B2975A02D3D85B0C2376C9FF84ACD6A9FA413E65C54541E4
D3BA9255A6A407CD7D554B374AEF056331DB0FEE2F1BC22425A29F8A28D82711
9794D971184895B704EFADDC9A0AA03E6734778BDFE38857521548024FAFC883
45152E9E6A259444E5E6B9E3E8B1E3F5C01D85689CCC4525C84D779935E08389
DFE1A496194F2A243956EF63751A7CF9EB0BCDB434D4CCCCD0A82595B975B2FE
B94C98901BD10728FDBA1E0FC150D14E7A28D263043C7DF9DE1DD4B612AE368C
36CE55AE8DFAC9CC0C44C9F195D69C19DC6B5E4F1132A70C6753278E5793F030
A56002ACFBA635A73EC6D857A00C0A26B059F65F8CD09CAFCFD72C947C3BEAFF
99AAFD2BA0083CC656C05DABD5E50B9509AA4DB0C268F50375EF93E27D91EF4D
2B88C75F5693E1153A04FE57762CEF71D3C322B4149E7BD9AC4E926BA249F16B
B8939D778533A4E9752E9B480924E8096616AF040CF947E647DF0E6727E15326
D95F535719BBB0CBF77EDDD1A47ADD074B83A9603CF8C3514A77119D4B121934
7EE589B6838244D19AF12F9498362DE47E085AAAEC51B37B1E8AF821B904D4E0
4875AD2BFD172760BBC7FFF57981E84399F2890AE97569ED312CCE10EC48F899
E4214738D813AD7754000119A99F336BCC878AEC85A6727D7B0EF0203DBE5B7E
7AF3732775DC66CBC4E89174B7F2C94603B1614405270BD4CCE6895D6DE590D8
B2181B1D124A750B7F432477933ABD21B1A7532C8F2921F2BBECBFC2A9E81FC2
14A8038F151A83D44FBBA21430CC0C65CE406DF0150C594BAC450E47AA94CE51
6413E2B48D35F82879CFB7154A10E420E7906BCE493318D03416C3F0B94C34AD
8DB652358327ECC1024DB1A290EC9137AE48A7805349504468E990269DC038EB
D75AA0A05113E287AC69EE781558633361C83D368400B010E4A66FFFF3996851
F49D0E298D80DA550A70D630BD0F5006F20DDF66C49523AB41248F3C382F476C
4E677BC7D472C650DCC1D5584CB08BD8D1BCCBDA76DFFE131399225CA79C1766
4AD76224E4C0CFFBD182D0F741FD535B16125F890C57D65806C96F55B8DD5DAC
A29B5B6D0325CF37AC935E453D37085110872FAC480E9B1B37C67D335D019FF0
3D44E76F52F2AD247D7400F5044BCC3ACB0F771BBA5BAF6D5A648FAE132E6EA3
CD1D19C8FE2946657FD83DF4676756C09AA6CFE874CF792A1C853E3639DBB6FB
B765F3FE2CFBBC55725489D5DA95EDEF4BC344009617E06E84A2FE6332D67030
4F9A5C8286AC95516E3E69607F0C48FC27E1ED722C98453C69671A5822715E73
1A6B87C49DA8EF352069E5B11402585C8CCD0CC66403A8353368A423D0A40717
B228563677DFE3CCDB73DBA8B223B7941E0419392DEE466FCB5313E89569FA70
5F2309E31D9F1FD34FCA8D8504496BEFDA779A1FE981D904FC03B3A719CBF2C1
BED3FAE14E2EB935991C9D7A2F128E8A5D7AC14171C5F401338C3C8AC9616875
20436EF8CD7CAC56D063DFC8E8ED5D80713445607F2BB2115FF21D0D3DA8D924
8DE8595E261A2A9B619A6CAD902FC4E07C83077B97A3D5C61A0A014BD64EA032
7AA56BEBC1203144C9EC1B7047AF9D0A73F8C883E709C0C58F13D9E009CB9D62
982B3E42A9AA4685C8FC293402ABC90E42A111CD948A3C112DDCD38824DF766B
6A571AD6D5DBB1B401663584CC4F999233C2A9F0BAB05D2665F8D706B2885997
0DDBEBA58D7185E6B51C566889CA43B4F128AF39815693334A68A6972FBB7DCC
D54BA3B6DD38EDBB1E0AFB17579A35F934FB87CB5278737D3B1FE46C8F1AC83C
D1053635AEE34E96A4FDCC07D245F04362EF6DE955D163244213D25C6417F54A
61B1DC2FCADB9420C8A2D819D7DCEAB64EB5F5DB560529FF45C10738CD687A25
BA03AF66A3B670BB491A78B801BCDA7730726F7CCCBC1BAF95C6E121E5CB824B
117CD9933462C7E51F4F20C6DF05B94E623ECEABAB77DDAF374CF38C1F0A2DCF
3B8F481F915250BB26C1317BE699A5B0C41928A8D2A9886C22F6509DFE3B4918
AD7D4AFD237DF17BAE7C45713129EE4E9B164DEE6827C57830429B836B9C5972
80C3E889C5AD6A0AC06062361647CA44CDB5CBA35593FABEE3EADAA993A3A6E3
2B0A6C4E46EEF3837129F55685E09D6B90CCA16A9CC59D84A223C0B7EAB0442C
1AC6E11D5DF146135F122881E9CE8546ECB2C7371E4654E89C7BE81288C98876
1F415C26D34C38C598D862FE2BEBA8E8FB8133E026C540A8525A38F359AC101B
B3FF3533FDDAE0D30D8D77CE472D0936C46BC8576C3394E3EB28BEEB78D41FD0
C96E20DDFB5D0B69FCA6ABB3CA2B3402BA77C2A8E4B3158AAECCB079C8184AF8
C129CD1CE04C96B3E51F5107D016DF2EFB584A7FDC06BCBBAB52D01E509CF88D
6E5B3A14E57F00E1593060626CC15B1C211E0A04124CD74F1F5FCB4950760C45
B1F901F7E1468697E7526BD68E842545B4500D2020BDC554E25E35720638B673
29CB7CADF9E0A2B2E57D7DB9F5277CD737D3790F8098F7154DE438CC9B04E667
F34D11744D035B2D4BE8D79D0846D271387423F1D7AF675C2A7FE9C0D06C03A5
7CD75A1D4E42A6F29825A67C407D1D62E7E357CB7161E7B3A7C9D04F16B0350A
1D009C89421C89785E7583C7425BEC1F20C49F491A68CCD15BADE0B4C2C5E163
4F81EC6C90659808DEF3029E1A646E16DD73F25213333DD0279CA6715D5AF932
E723A7304A3A806954CB019298D6D9DD0B581228DFB3796C46853474730DA184
856ADACF482FB1023491F6FA9826B42B7237641F159847E1710BCDA86D56350F
3B19E9512F87AEE0411C00CAA3ED1A5B6100147063984376068236EAC86DE715
CD305C93E2E5824ADAA4610E905E06880D64691C4F5BEC6BA5E68043CD7E2947
1933FA79C129542F09F571579DB9EA206992A652A4A6E380B2FE050EC65A717B
2956704BFAF135436F80291638F408FFD828CCA3570DA2C37A4B5176A308DBFD
4769C4B8084C4D1C1066A8810CD224D86237ED408599101C5D25311BBC0F8B54
C95DB60D6B24DB98B75AE635949DE213F2468D5BAFBC2EB772E584BF0753BA09
DFF89472C2AA0AE5EC8F9228186F32DED7894712838891F9E9A39AAFBD671576
DC0F7EB66C94AC1E98AC6C983EA7E9D6C5E125C7A16197F691D48F3A6C561DA2
41FB96AB553E10C6BB0DFD09D8D7E18B7EC40F4DD4213CDE102F287E827673BD
5A913685B9BFE6AD2AC7AA5AB3C98951A38C271944363C27DE6DF4AACB84253F
F67AEB11419B0FA09C95F61F35B12D877921E81F4E1748B38E8379F2083FFBC2
6DAC2996A5C3B1C9C854EC122EA08451F6818E377580BE18F32049661D2C45E7
962E71880E8DE42CD71299E13CEAE5FA7527785F74818542F277E974B2A0FFEF
D63102FF6D55003B2791B9443A36F24A48E5AFF32BF2FDE526AAA95E2EF03967
840ACCD291A12EBF167FF3A73215716B7833E1E8D787BFE496A5AA436CE662F2
B34CD198FA2F08F2EE67C941CA8A9534644FF4C1D4176F5BF376BDD2FB31FE85
697BFFEC9D0E7B4E05AB37A6028827F1C2A4EE5999AED4FE990377ED333130A5
AE2162B9809889E0478B0716467EA150A89FBA902EBED1D8E0E8AB0B1A7C66C2
EC048661A059C4D6258BEE83A2BAB63AD7924059E28C5241906A3E1508E1B5C3
3EDC9777BB1F3485267DB0D7963A131A43702D1A9EC99BE03161677C81894610
B13911DDEF121A338C2AEBE26D3157EE1258EBFC356039EF3B729880A339E16E
8B6055D07F6A29038CD83D6FB1E1CE4B2D5041CE75224FFEF39A5A2429321CCE
38CDAAB03DEEDF7925F3A66DB7305515B90EAFB5976AECF8A687AB04A1C89D59
FB8DD402DD5E7964ABC19B94B5257F12ABA529922BFBD8355319052474DFA539
89AAE876FE19BD0971D64A00DFE262FD5C9501465E30957E853EAADD8E844F79
4D7E909169B206604603656A8F746F03A9B55CB2C7C0A055861FB73440C1D3CF
338828D0CA006E3EB129DAE6047037C1D53D4B1AD223DA112C8911B8D7DF43FA
E56C0FB185C9A6B79495029F8441FB640D762905F1ABA72E47C6CFB0D974A368
F0B74EBBA87DF1B7215A762197213C66AEDE35D683E354B80BC56E3CE8442F77
C401ED694EB8BCCD58E447D7AA55B146D8C3DA4697D0CE9A6904E11689D8DB14
B95ABCB52A3DA0735DBECF5AAE03A9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A516AD96B9354BCDBEBB351B643BF3CB00446AFFC4A137CB928E99D626
4824385F1E9CEAE6E317451B4ED21EF01ACC5ABA985FB14EE70247FA3B66ECEE
431352ED45182614EA3D57BDC22E5A04D5AAB27C8ADCD7BC07BBAB21A1901F39
4C9C008D353F0EED437BC00D2E65A3652361D50E16C785B66DC1D551961F641B
032E133A31A61A335EA302469363987224158BBCAC91357E79DC8F409A928EB1
8E1FFCDC81E7B443ECF0A6D728FAB96395460B33F57CA9B88C746B9B7B453D4C
0755B802DD31E854C52DA0804B611B6014BDF91BF76B6E491F4BD5C46574FDCE
673B03F3D6FD5F8B860A2556FCE98FDCAFA81B35DAA07BEDB39ADAA041BE5ED0
02EE5663F1C139979D11BBB51693C13514CF00CC7F9E9AA38726D6B1AEDAAA46
FEFE290831071E035F68E9FB2AB771DFD9E7EB3E255BD3FD51F325AF0AAB03F3
C001351BCC357E49F8A94A7481991B6239C7D48C5D55D3FED290DF6AFB2E23EF
1FB63022D8230A40B34546705D09709C2A02F219434E951DFA82A1339C095723
10190C4CA5F9B9F98179382216FE74381A001AB228066DC706493D1267F2263B

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBXTI10
%!PS-AdobeFont-1.0: CMBXTI10 003.002
%%Title: CMBXTI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBXTI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBXTI10 known{/CMBXTI10 findfont dup/UniqueID known{dup
/UniqueID get 5000771 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBXTI10 def
/FontBBox {-29 -250 1274 754 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBXTI10.) readonly def
/FullName (CMBXTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1BA61972029CF9B4E1F6A
FFF97E53D6378FFF9043566D67519B5C031015C0D52A7B292D219A2BEE49FA56
820ED09A28447A71C5CC595AB286EE693EC741AEABDAB0688F7B46D9D584CB99
DEB048F0C0723F0D7FB57C896218D2AA0AA4DE241ABD632E25F0B47243CB7DA2
EE53CCAF1682D9B580006432DD7D53D06E90B3457FDBE18179DE415DACAF00EB
4E01CB49CE25429F8BD45069477DE90EDC87EAC15285D321569F8C19AB5100B1
DF31636EF29DDEB4BFA2AD85B83CC7112220D70E69D5A39BC3558F067A93C6D8
7A78976F7B93A589F0271A034D1A8BBBF082841719E2901720E89568E9376AEF
8D41ABE4BAF9E79809F5BCACF29858F8675E37804758D58F8909027A00CCCC32
5441C72BCB031D09077BA9F778BDF52F172C2EE62F0B98EF852ACE037C6240B2
671C0F01B7D4A9276A8F6DE3B6BFC2C34DC309E5888E249E398CD60549DDB61E
7E36890B1E37E26126485E49114B7CB938E2733D9A14288C3A763D326D7D9183
46B970D455050FB97612BDB2EB29E7D71C909B10CA1D479176652712C112376B
085E9F99C9A488C8876954EFB7520CF97D08AD84341FB55764879C5CDF8EEFF7
DD31DB564110A07119E52453B778531FE181D09D1A9799D7AF4773AAF77EFF2C
2091194E301CD88C97CCA29AAED2CD68ACCD8CCE44B9F24889A83048B7208BAA
84E136C58F9DAAF73815C6025DB64C45014BC472358DC014D243D189ECB1EEB3
267345D1FF4B6A01246CCF5FA90BB355E3734A7C774DE68C01B5F356D645C4E0
1D0B7734E05EA28AC6A9BB2123EF3C6E27F52982A7612A352213C6AE3E80A819
2304A70DB8A2441DC5321ACE962C6480AF736920B64A2B433DCC3519EC8B577A
30B0819700A2281212CAC280A0DCC50E78295B98B2DF97A78BDA1879E6B70C10
7BD15FE29C4EB1D5A33037F0AC9BF8CC1FE88C52CD114EB33F1C6F8ED88EF98F
DD0C3913DFB36147F581C91CE83CD73A0D012F3D0FFB162C0F4597ADC8D93911
0DC6D68F9FE702FD0EAC5039D462756551C379C5F4DBFE05AD2D1BE0EB389AE2
391E461DC4455E0D3C3E46F3FE9BEF488730D71ACAA63BEE72367C52C4F84766
C24E13D1E63791B4838161AEF8D0134145BBFA4D848CFFF1DED6814A7215F4F3
3E2D654C27F3279DBB22A568B7BD1D5A9D75C7778D36C36BDBE32C8FAE4A9209
20AF8B705A77CFF4AA9ECCF6011F0A359556ADBEBDAF5BB706FE6FF4A745D841
102279B66CE0C842DF8C2673ADAE354B2811C48DB05994388AE4053F4651A884
48DBEBF20FD05DB617F8FECB667B748BB5741D6EB62DDDD0FC58537EAAD6FC22
A11ED24D34827C3446C8FB81E4A0E904206A1053AA9E718B0405C6A7B8B893E9
30E7A31B9AF8A56B5EFE72FB5AEEA79D56E19E037BB4ABCEE079ADB53CA546CF
D98F7B38973CE3A6DFB315E87DD1E60C34344656D76C16E1DDA43C2ED276458B
11D7F4CF3692525C0D8B6307A2993F400760275A8648A0048E0C406279D48045
D77A92E99F9CB5C05E8202416EB6FF308C4C979895211450BCA82B19B33E7240
CEC18204C09AB3D7F8025C0C909BC03A1851287ABDB975A32C3FD8A1C99DD90D
4B1CE2F5DDCF140D4D5A19F33241D27E8EBEF4ED569AAC255E47813F31B30109
7075766D5BC1731B082531F3D132A937717EF67F496813139E8E263C088F62D3
DE0EA4ADAF3C088F562B0BACDC184DA3BD0D5A8A4B8EB487D0B6F1B74A969942
91CE8CC7A33670BBDB3F1E1D791F7F1D3A3F3183F2410DEF99EB932CA80FD931
C62D09A0ECF271B5BA043C9A214CE631CF8239ED0640BD134737A3E31B851DBA
912B507F72B80DD9CDD23A697F91D66E59346FA3A75726C386827D910714C989
5464B041E69F4B87290BAD381600AE0A976148CBEC8DADBFDF0CBD7148C3AAA1
7AE2EB15686E1AF68B4C90130F795E86C9AB88556E429EC943147DF363029B81
4C637900FBA19DD98792F4CC9888AEFBF9F7765B817ABE83494CA3FBDC79CA03
86CB628F75612209DE9CA4D585565E9509D5DDB8C00A229F07918B062265AB29
176657CBBF2382A219E573667B14687647DAA7E9203FEB4CC94B10B57F4B1143
C4962B6A888D62093A1D49E2C7D65C29C500B61E810BFB94DC2DDBCCD8B6C61A
911C2643F55E9E2101B1DC7D7176F7743492AE7CB84D460E8C00E91E5486117B
D9ABA9E16D1606705A0F698EDED5AA877A2CE7EEF25ED1D97EB348115CE5BF26
8A48BE961CDFC6F543BC89DAF665A681908ECD8CAD545D0A72C9C184CE67F6BD
7B51399925DE379BC59E9155A30C67D73D01BCBB1886F8276AAE58B2422DEBA8
266CADC83429DAF4F80CB25E0BF455CD7863CFFEA9E318FD043908D427CC07DD
683F6D977680E9B4F6333D4BE7E729F4D15C07C917862B47F0DB2E31500ED372
A556A8B617FADDA12A2F62DA2D9AB46479FFBE4FA42D9B8D597CCF4E6D04B418
8A9B523F4678DB40E7F325F81C1EB345D71849E57B059653CAAC7D9D56CB2E3D
D4F532A2D674BDBDE970D9211A3EEEB005128BBB5E0C313B42554F058EA1D180
BFBC9521FADB7DE03EAFE314CDA873C3532CDDB83EB0A6A7454EE85A4C36AF2E
895BE8309FEA168B73C6AEB2D454B234F1E2EB554C7406B79A859F6B303BE795
B6B4DBF104E75838F3EFBCF85E0B865779B016AC38272F8BBACDEB13164EB282
B59BFEB1E3392885916FEEF86A8A975DB9BFFF17B9E2173CD18264BB14CF5633
FD4BA46D7692CF7CEAB7EAE80385566061315F8DB8A7F495E68D4008B09BAF99
DF4275727F08C5FC58BE9A084B267D0BA62A907F22C466A3A79CEA6C207177AE
B1254F0810E6092DE5DB1BD3F238EF705DD4E806E0EB1988F2AC92EFB8843064
3CC3CA506D9AAA0CA559AE7157603D34BEC19D6019F0566974BB835DA172FE37
C15C0367C8FC164184648BAB678D37871F7F610EDAFE3F49289C6320F9CC113D
44775EDE28FEF4E14EB5B426C06058FD32AD12B42A2FFA0D9CF0C7BDFB6D7C4D
72F4FDB716D7C8E7DE84F614487ADF4DF5F304370043B25E07445F8C65109708
EB771F62E01350B7C9B659D05305CC3E4D94378BFADFD8D94E5704FEB2BAF58A
5B874C7EBCED806F068E93D4DB888B325CE246D02D1220ABF55CE646DFB45F07
CB8488F229A5562968B079C2CE2067B22B98904D977E3EAA82A6BD44135A6F07
36E3252FDCE218EB5DB8773E2DAFFD1DAD53671EB3D83A275D011BF5D501A22D
407AE09257CD21297B617E0443FBDAA297D37F66AC436DB78B410E79A002233A
0D7DA619CCA9DA4714325A51CB0BBE9EB6CEA352BB1A0A2FF83610B2A17E1948
0E9285E1570CFCB8EC7E1D691A72611D336DE5C6626A1D1D2DF363A1D781DBE6
1235F1D1805CC2A8C670005F84FD468167F8640B12929CF347538B94EB37DA39
904D4763D93E757AE2B4C775D98E23BA983E35992A292A04976544EC462CA656
E5EC37EE8EE46BF1C3B0B4C912DF05AE1535CC654000B06BCDC95D9C6B5F36F8
FD8A0EB31A02C2B863DEBF8FEDBC57D5F93D2604321FA66070D14FED60441E09
999B90A5FB715347583A35314381554031BCE4E6E73AD3FCBB61ED0D4C015863
119C1D945E981AF3F38C81EB3A350A70A63EB06119965C90D7EBA669359FCBDF
A87C4DB920F8F3D99C73A0DF7E10D3C410696D679CBFAE831E3E99FEF6C038F6
69C58E1EB6F60FF587F5EC561629EF429734CB886AF914AC3E6BC04F21D73F18
4CA12D7E033B301C181D15101A986BB95132DABEE082A617520CF95EC9069499
A02F073D7DBE41726B51FC05A9348953495B4CDE8D0A8F8C04D07ABEB3BA0076
3A80F2E3B5804947E690DB3A7B3BC6C48A67F5D45F5C658FECFF28790B709385
D24D02FC3B0C9F9AB04E168BAC78F0837D9BD402C1ABFA84148FD815240108CD
511E50FB8E64F20058EE54E4ED45181AD9BB777DEE3303C4991EF8EC56B6C278
CE63F6C2FF92308A25B9AFDB4585A808AB3F03D8A15A20FFE399DEE429C959F8
B3DFDF81433C41CEAC874479A2C51F9FAEAAD5B7B23230B99523FB256896A85A
8C48C057A70DE745F753B4183AAA6F84B4ACAB090F33CC2C31186D1D8A0218A7
4E1987D86B9C3602BA294CD29FEECE4187523CF511FD075692B1C080A5A22281
BAAA4EA701D7573D083E2F6EDEA3D49FEAFF2CBF989703E83828E6C7E324558A
FB73E3388F0B0E6A97EDED5A9553DD33DBBBBAF2174A562AE2B8A4B6E7D13E90
FF9B7D650231CBF9EE48DBDB00AEE2E0FEBF8D6778F19CBCB8766A0ACC9BCE26
59771BFA97CE7BA811A3A6C8CBEE899839E525DA2ECDF66CD99FCED902AA102D
92CD9A279453BA74EF8C0CF32C11A412A05CFA2C187833F885F359DCEA34EE24
E90F7F107A23D9EE269C15A647916F56C32543AD5F81D90C84B8305E5BFEF1F3
B356CEEB5BAC54AA00DC9C6F03B4AFCF7AA4D31964377525A661FBB743D39964
47AFBF76C8FA874BCBB374B02C538AC626004EC8E1E9030D60C4A097CDAFC143
732FB7431008CF28ABEC4529F4689720D4EF580676CA855FFEDDC66B7C1DF07D
B89EE98C0DB6FAA5551ADE4D674B51E4E3FA4B24A3DB5196E01C6CA1DF5D669A
3C0FC57DC1F576C2BA14D5DE284614AF3276E3A1159CBF8D40426A60E8C5DD42
6F1307222DAA8AA78BEE55C27E26013120FB5471CB33CA4FB642B1C386018EE3
D4424CA411F49CD569CDACB51AB9BB5E66E1E13ED5F8BE0E912BC13C7B23E10C
042C33DA19656264D7473B4E0C3DABE14F9F94450D1113C88EEC18CFEE640A6D
9A40DA9CCED6EC5E2E9F1B357DA635C3A2C5A23874E496B868FD0260D30F1780
878A900B90637A1237C63D83335A3FD4A664321C048BF2273F9C4AE3161E1F06
E6EA5F3F15CFED43C622E0D7E245EDFB866398DFF2EC994674767B7F3DD853CA
356A3607C7BF8F9C6889EB9942ABE469EF88368742FB5C41D06125D2042EEA41
4B344AC718FEAEB308302F5607C06852A30CF778D236EC90CA10934C629FD598
90176264DBF9C1AEB33A6028B9EF09B06BCB182DA58ECCAA4E2E1FBB13868C98
CEB61223E9658EBF003AC67493587A156EFBE73EC88CCDD55C9C10CDFC52F7A7
B274D631DBB5D629F41AC8760741953A6B90C6E9E4D2C79702C59EECDC65D894
8317D67808CFBD81953AD32837A42EBBE48F77D6B387E272855E54ACD32D3377
E19724B3BB370A71C633C3A41A0523FC219EFD5310EB3CB5FC93F0F9E6BFB115
17E2B901016CE8DD44BFA8590EDEA88F5229FFDB83E401034C826F038D58C19E
54704A4E2E36B7738FC6F80DF4D82A5285853C49F9689363392536C3BA25C00B
7885E7DC3951E9B5D22414C9E9A264954CCCFAF8BCE70CFFD4F726263EBEBB70
D52A58B3D6BD029F555A630D687C7E7103C8B8F2B33EA41732D6FB7FA999CCA0
185A13C8BD80A2762AB9919C3E9FC07556BA8C7149B4CC5B58DBE84297E3E8D2
B34591D9FCAC659C0FE115F34ABA807DD94410AF8F532418382EF8F7980E1598
A97A61926B809FD771B2795C69E6B1F15FF0EED329FB793FA3FAF0580ED07F51
B0E1BC1401EA5026897990CF09F9750268AF812E89DA551EC14B457836CD38E5
C07179A3EE0ABD3A85C693ACA829A5E492FD4F1BF12725544FBC81FAA2004784
DB367184315C68BEE9FBB1D68F91C9D0901BAD3BDA4FFFC203C232276A495EF1
B2B82F36FE36716733F0E993B19407744C067324BDD2D5641977B1A118DBB844
104397F963CA2E01B7155CB84BB642FC315C028FE4502335F761A9DDBEF7ADE1
ABE87D31AF848A5285BD8328ED3E8A2A608590DA11968AA8C0D8010329A9E172
AAC2C7D0061B14EDAD1142FEBD3DDC0ED20023CF06BB146B3F58A6A197DDA1CB
2533B236FAF2825E8DFE70B79A0938D79664C1D26B4412FD10C76729CB22392E
8976960ABED0A03D5FDDC7C5C2C6221BA1FA08020B88FD9AA0CE8B5FD26D58A6
79339A2AE6730746B8413B6E05361755FBF11FBFA4974CC1AF36136803DB8282
A7F5429327B875D0FD222835C7AB82049CBDA6AD1731F6D06AD2A20027765CF6
2F7E4BE9521465A7C3E968DBCF95F2C62EB3829CE6DFE845EE20E8EA89CA6C46
BA14E5A920D8E28A4008C210F747622AE31F5F9036C70FA52BFFF08A4BAB3D5E
A2EF6E8656F89058F4A67933AF30E9A16467D563B2782268E2568868F677650A
74F415289CBAC0DECDF828485066AC07C011623DE9643DDE39840B1A739B33ED
3EC705C13DFB191472987059E5017002D278168B5280FA2E26C6D51CA663B384
F5CFF4A6232F5F68E185231EEA239904319E180F91DA98A63B38E16E138D2DCB
CFEFA5F3E5AC6FE764A3A9F3EB622117662AFD26A124933CB1E04AAB53923AF5
D9DD972536C4904A1602040545A9AD4904D867C1D0AB907D733EDC19EC093391
3B0EE96E8578527FD3D1204A25982635CCA01A9B101A843F6C373AC4C8E39E39
BB13AE6A0EA170B59987488481D38806D429E902801F9CE25EEDEB6012CC9EBA
0736820F82C640CD8C7D852D9EFFE6F769D7FDE1DD628861FF628BC0BA8EF127
26F83D7FCE6ED8785DBCE502DD0571A76D88B7FAC1E2DB24DB97394937A1EA17
031078EE07D00B554B9C892C68B624D3900266E8850287243BE44F11F86E95DC
00E89C5C47F573C0A7F1CD0CCD26498334C7D37A3AF4457CA805446A74344597
8D8C3D25FBA2350A878E23DE65D49E9E5F819484DC1B85ED2BDFF923216C101F
D8F411C1443AD7BCF5E90FDD6BD29899C86EB3ECC82832FE75A59EB3FA696F26
96A450E2504A473123A8D24956ABEF5ADAF5B3BB57FFA5364214AC0E9E245CCF
431DFB8A7A5104BD97D5E5104CA9A05774D0FCA9EC0458BD7289794FF19FD00E
2D05086336902514F5CF8141307C037E5D2E30B62D1C8A5A7682BC941A5445D8
A17F5670554AD4AE24EB95524CEBF2599D5D00AEDEE2B5537F869A46BF093296
C77F86ED5658C3DD3AB9C25850624A53F6573A51C7AD9F43EB8320DFA31F7F58
E0FDFA9FF640DB5B55FB5C4E014A8C50E062F13D573C845231F98CDE7414BD44
0AD4CE9E00FB39BC93C3D1C8F5FEC652FC28AD9EF814CD964DEFC5813828B0A3
8AB0E0BE6E3CD60259B8A50F95CB02EB685DDE048D73DB0460985EB16DA749DE
3EE1625182EDC552F104E547D22E62501D9D4EABC09531E6457B7AB148FFBAC7
927318F8BE99EAE5AC9E6AE81081E236187C2D384A92494DE6BD1FDCC5A79413
609F865C6067EB60B83B1E0D49D2CABF88F252377787534037AEA74A842CF21A
5514F3A89A00EEA33793D63040EC2E1231C04026B8DFE67E0E0B460E3BC6E60F
71AB1C05F295F617829255BBBAD68D6D7E5AEE12DAD835A693A661AD9923BB65
C781B9085640D3A5317C312DD3C6159C15D8DAA3A592C9F4B4AB648B160E4B3B
D2E3DD475573570F5EE110AE5BCA3C499513061F202DB76ECBB5316F21F04195
4B9EFF754A628ECC2B68077CD6072C630CB99421BA3D0D1DA24CC09B8D42E8EC
B52EBAA0E16DE13F0F2E235292A0063ED390D9A8E685160134E931F924D150C3
B1E315CCC86F2AC29D02D0D98DEB83DFC7531128E0AB55B5F7D161A44DE01547
38DE065666440E46D94CC4AC21C42F362D222A5CEB4FE9FAC0892ABAA08F3A3A
B76A22CF73E343BADA5C89355A821C67A626C0FA6F8742178B9562543607FA64
8F9FC0971734B99E476E36E9127419F27469DD3BA6A1D82680155B46073D42A8
AAE4A6F8B0B2ED3A99469BCF9EBD004DB631F105D77CDF18A2EDA5801DE620C8
987AF2A7C5BAB3F09769CB0CCA5B1CFA6A01DC0EDDAF693D168F9CD580D7AD66
A2DE7D9CAFBA0562AB6D20C4F2D4F37A3B26398A1D5AD2F84F0E1339008A37D7
6973B67E1EDE40002AA5F65AFD81A00CA4343ACD98C94B6D69CFF950270DC1AB
3B2964A1A9472237596E8DC4F671A68F8B02EF2EF44976FF68DF0865B18F403D
6A88CDF4E0C8D41C64B9B1DEB72F0E9058E479B457EA8FCE8009D30DFEB19A02
D18CA44689E5D8C529CC5ED9063DF88E60ECE39B16BB1DC5670D0AFA76DB664A
C90B081062A258628F5357A01AE05B363D5D81799CE0AC2652496AB5216C1056
3A49E606C88B30FC6EB350824BA11FE289406AEDBF4C62820D54C01D234F8C41
BDF9697B34A8B97D974D093032E4770EE75B024438F6BCC2EBBD3703E9E13E1A
207C016C2E48A3BA83B658BC4F7CE4B64D23B6D5E4D7F4B400E6B68FC37D3E0E
7374B3A21D7845B34F4B079ABDCA5324AE91CD7E7AE271814FF28497C5F2C447
1A1848AC92D2B686AB52791C43FA7915620575A6B61481639F53059E3423ED5C
2A09512BCA0C71614E0E51107F4C1218C4A3BE9C12989CBAE903A928192DC8FA
DE8B06BB2D8E020BBBB0EC1DB08A76B65546AD55071E3D21D02D125C56C72BDD
8E223787E93888C9BE179BAAD25821AC7EA4FB8FDDD3027F3A6FFB13B589FB10
2DDB5AFF7E076DC0D89F2D36187D51EF9EC9577DCB50C8247C5370562310E845
BEBA147B6D5691F91E00D24DEA6996E819AF842694D44E5A595DF317DDF5901E
85A6DE3BEDB1289D0B7B0CD90197A8F3A3C90515074F047D68E187FCE3D1CCE9
3FF1B88E3D175C5C27D3AD62D580089B3CF2BD3A96A8031F2EBB0D8F5577A6B0
9A007BBB703C6DD332C96D9476023F607B1287BDAFD514A4389EA3C5055DEF86
1833559F2961A2E5D6500D674104610D509A2805224954A01241CD461FD6C807
C1ACDCF6F2FAE054B71798BE4766A542E3495B54076F7EE65222F0F66DC82FEE
EF292070E8A82FF644943B9A858D7E626A3AE276E48F20CDC7D8FD1D9FEB5190
8622A7379D1C83EA2B81A6F6B2E86894F695BDFC553EA4F2CBD1594EBB019719
991D0D1055B0956FB94240A3582A9B5AA469A4FA1961CB8E2F9A2465548506E2
4C05E0E0A406B20639A20F391BE547973A500D9E5D80765F2EE60B719CF32723
B4C22657AFAEAD185FE4391D180CBCC1BEF7C99FAA2ABACF2FD61863E6D8B841
C74823F1B41D6F160AE0D42A628E9C11075DB53289291D3AC7D1CAA8591F6312
50CAF99CC41E3175D84EF9F0408FDACDF6D89803B6A11A3192E8A84FCE128D39
AE18FEE87BED71071BA0E90E52E7AAF357751C54B9BB784300879DCDB6AC8546
FE94DEE1AF750CA409DD591C4A7F73FCC2F0924AA8AB5AB99436FC18A4224DD3
C0791A1155FCDEAA693AEE38618BDAEA44E374E86060BB5A6D2674E24838BF99
B0BC1927F9D1B1029888AC2E16257D1C8E9D9A771E485AD846BDC106D54CFB44
19EB207CA2D7BAED1345B648BF357A041B6292ADD7FAC647B50969A902E87C62
8AF276EDF9463794C52C8C43041238079B0FA638DB7CB588AD1BA32B78FF208A
BF7F955D55EEB8E66032A3B28231953621A9533E50CECEE4C6EC3DB259EDAA69
ED67133812085813646528D4FF75F9418C7A93D260A72B6AB63ADE9F0C5C56B3
D6278396076B7E81FE56581C4CCB8104A1588DA996C0F2A5BF881D86E9FAB1E8
4215086FB241D35246D76B85EB16E74A6A6F71AB0EE6C18E5BD435BD56763556
7ECCE1E19EFECE515BC6198F6728C02CFF4DDA1F2BD02C6D814DC7DCCB43C7BE
D3BB8A4EE2FB62C1738D61C584CAC448B1A4896852FEAE7DFF3460F9F9D128C3
9E9C83564B2801CBA545C79BE7B7F8EBF913837E3D1C5EC3DD919B4BB876BC9E
228BB6F1BA4BC459ED14E16D193CB1AC62628F74D47FCC210033B0316F2CB372
BEEF08420439266C31AD7652E3E62216A097E67CDC0E17C19048185E9AEFD88F
82EA94F8A4A8BAF69E58F8533D52D2696FD2D5AA7E0B4EBFD4D185F7F466D0FB
33F833DF9BB35AE306B7E58117968E8BB5766726E935A451660DB64B7BE98D3B
5D97DA0D2EC749B103A7E286341DC0BA60F17C9E5A0E55EC028A8917401AE662
D36EFEC4E2887A1DC94D7D8864AF40CDF748824F9AD1D01DD1455D50148FE939
234A45F7BEB0652F48F7F7953F643C0F982F38AE455214A47E1EB62F82672DA7
119422871653217FFC3076DA0B65967AEDBD1E2AFFDFED8C1E64D7C5CAB12FF5
BDDE4B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMB10
%!PS-AdobeFont-1.0: CMB10 003.002
%%Title: CMB10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMB10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMB10 known{/CMB10 findfont dup/UniqueID known{dup
/UniqueID get 5000761 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMB10 def
/FontBBox {-62 -250 1011 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMB10.) readonly def
/FullName (CMB10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 63 /question put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 82 /R put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D432E1428FB6D5BDAF
3F02C975AA4E0072BE5F8CC7D3D59BA3FD04709FC9E52189F55C7747056EDBF5
F85CCBDB1DDE9F9163AC7158EE8DBFBE8D94A46510118ECE6A280C4872F448F2
E6A6B36AE3224FA448DAF204D1C998D010C6BF52DDCC45831DF1EC22528B00C7
70525CAC9F6BAD892E7D5C81295A2AEFA8A5E4B6BA2C4EF61FD3FECFA2A8551B
DC84DAC597222341E762620D3D3C1A4AFF2F6D68C4813004318FDBBDE23AE224
617F7BC1F3846943E915624D6BBFC555E2EDD013F190492F03CB64E5F2403723
7A2D4652BFFAD1FAA1DBA4538F2C3E608367BF95E09B853A2BBF9930D9B3BE46
0BFBEF05DA75DF3D8E11A09D472A9E45C626428A1A599C111ADDEC7A4E70407A
014F792395A2A12303EF51698D487854EA15000AB08BCCA8B2E35A5018F5460C
9B223315D7B838BFEB224E8D1DC9A0C1077DA31F5FCE0D9D499EB0507B90E9A0
1F92FB5FBB8D40568C1E8B8CD6E1DD27CAE6E107AEAC5696CFEB19091B40FD77
7A4B4F0F261702BFF5E2320C62EB5C6E9DDE142E9FC7DEAB99D90297AE0F15A7
04C0E3B39FBC85CB6B92BDA7917698230B5374D9159807ED1D07947D95802693
A856C84812ABD3EBA336B88CC8F37288CAB59790B0882A4ED6815FF6D7A1BB35
5C7B7437D2ED76E806813478007886ED1009A1E73CCE210FFA69A20D6E05A713
F6EFAB133D146B0EBD547CD29FFE7870973C1E71854C1C643BADC69974BE360A
4CF84FAB098EA3DCD2DD8B2FAAD19429B0ACC7C312B03E6446F1C1D51E6AB45F
72F11FFA078DF3196EA970B24B1BE607571795A2FDC2EE7194E9422C483799EE
23E16A737951BB935EE2C2BF008B6190E0138D551E75C9E6D0EA48E64E9750C4
BAAE32B894BE25D092CFAE894230430E43C585D0F06636C8D56BB80A4597A0AA
547FBCF12821C20F0E62369E1A9CD2343B8A8647B2FBB1F4C86CAB1F7A14669B
69DC857F9BC7538A864E523C2DF7C830315E0907CB17C8FB6E412A2A9E88317C
0026A6A402B36BDC433015AEBAD775835E5ADB4EE75FD8CA06C199E000CEDF93
00692F29C5394DEE45DFF2D42872B1370C8D4A14E144FF36163C849F9339AB97
EA87BD445733162A34E609BA1E92DC92F9AC892E7A0B39AB0FFE517856491695
56155FF0C2B231EF1314CD4A146EDB1CA9AF7DD546CACDE1E6B49BF0D4ACBC09
55C85E2D38DF84E0B779642F7E9C26CE19EDBF328104B9E803D1B03F3FC24C4C
9EF0D27C8E5AFA420A63981C000A0C1F0B3D3F853FF300EEC524C586376AF998
DF4ED5AA16D8E298C159C2A3E33048D4EF192A11287F69B11BE24D49A033B334
83CB8783383F92EFB9E3BE84CEF37796BA4211E534B0360970B9C57EA7CB54FB
F582789A83113ADD2415B3F84AC4ECA15DC70878A32559198DAE67B083B0EE6D
68A92511FA8FD6BA88A42769E3FBBBBDFDAD61F99A6C274B48CB044D16FD5953
44F1503D8D1D6DBAC41C1246A71EBCEE5B1F0DCE3EE7E3A99792DD8FFBD94DD4
3A5ED347A62D301B6739AD2BCCC7C57378C29FA5A83759E7AC6F1505DF6C0E16
71587914F698608AD93ABEC43611DE709ABC3F1C0A1343CBED5F09DDB4FACE0A
8BBA9DE5B85FE9B4365358DFE877BBFD9AF08BC60BAD7C41433BBDBA17EA9A7B
92F76358612FE44F43A85588DAACCF7846ECF5C58B22F18120F895317609AFA1
06E88CA1D73C4CD5098CF44093207C31F46977B6D22665AACAD5A169906640F6
3DFFEB3937BD6CE1501C52783743F8F6110DF43ECF512D49A55379432CAB1C33
7C38B7A38DDB91F0683A052378CBED8BDE4E6DC32FFF6D723A4D1469D32AEDA9
FBF89B9604656DD0D44ADFAC39BA893808676E1E08444CE56F6CAFF3E93D8D41
F164049193BA11AF94B43515BC79D6A538C00B08FB518EB67C27E73380A651DC
4B244E8A2E4ED405EA5C7EEDDB09D44C458A883C839B98D9D6A2209516E0310C
AD777536190ED06F47EB2ED61C53A2E0AD0CA4E4035324DE75F272B1CA6BC1FB
B912807B7331D932DADA30F1975A1C9A8B55604EEE8A0CB514C6CAEECAF9C46B
5D5563E8934B421EA1CCE3B96412D78DBEEABA59FC603CC6ECF65BDB5B66EAF9
14B852CC04286EBEDD560713090BC417A10BB834944E007F45B61AD6E6150B9C
10A6FBA56C1B45EA5F9A5379B1A0788513DD4100B82BD61D89E6841A26B362B1
D4762EAF4FF3BEABD882700BE9832115405728C5292BE942F871661EB0E6B29D
430CB271A090B6F5399184F21ED6728171B1783C982E61DB7C0BF90CBC1482CE
C6982B4F0AA39076B64CCA5A71BE73CA65F2CB60B89AFACA957EF8E6429F2182
CA36220F80EEC5D01AD7061DF45CC5109D9F0B7E2B6DB9D6C6326A45DC6C05D1
E81B636A82592D99C7B7ADA0E958A0D7570BFF1830017A6241AD62C53D4CB36C
583672FBA265142DCE545F4855CA3D9E528143AAC66EBC9527B76EE43B4F4E2B
B209BD265D6AEF18D168CA7BA2CEC40DF86FF352029597A5A3B2941D467DF229
50C788D4276C5B400F360AB596E35983262A215047C9714912B2E69CABC0DBDF
BF6925E19EDF3A6638CF5794722C8B92C6DCF5853DF288B9DA52A2152F98227C
FC04D3C318E7D942E9D33582A490888F0C1CC1A8C4474091B4956222DE467632
33CF5DB7DA165B59A648AC6945687B0ADB83EF5B286CC469B2C9E4AE92ACAE8E
86E4C62A092B8F6C05EB2ED346DAA7C573A03760ADB3CD55B6C794FF4463BAC4
2F4A738F9C4237107C503A7EBF4F4BB4380DBB64F5F5C9B268111752FD2204CF
F25085683D071FB4149A64426859D407936A3D1E2C627652C126D8F9264E2919
960ACB9DD61BDF973492CDB1FD20EA81E06BECF5E164A8ABAC12926DE1CBC0FC
6693737B4875F465B5623C899FE129B3A52A2BDF104F8B8429890AC870580C7D
B078A9E26C322D1A8AC1C6B2BF340813D989EE8D054882B965905D33EC3F4278
DC41BE055E0E5F73B5A1F45E9E69718F5E155B4EA30B28BD28C52C6C322F2E84
674CE600D699CEE1D2CFB7212BD8168B45824890273A0AAE4757D112980DF2DC
C3026300B4BBC9B081817AC7F4D48B309E66CC7455708C772A08EF6FAC829363
E27AEBC3E7D0A91984C05935B16E102E81D6AAAC347E38EBA40125543263BCA6
9C6F4AD6BF8C3A90279FCA4A99D9290C3B8E0DEBB4B2DF932F66FD47AAC3094B
7582FF8265CFF8BBC7F79C8C74B1FF94B26F3817A39B5FFC6BB562BF6DBF9CEC
31CC3BE4D7E431D41D55D96C4F020486F993781828E9E8850192F9F6BA350AAA
5E292210B0EFA4061EC8BD6EE15E3FAA4AB2F54110D17D29BA32C0D28559FF32
D164DCC98EAC78822D6D6AC6F4871D47290A11C83670374F072A9DC723096C89
EA584D43BBB13584D9B8B1820C415DA2E0DCA1B50655E81B47B9AC8343DD8FAF
95F4771ABF81361EBFA9259EE8901F31C21E95DD22FE04BDB77D23DA561FFCE5
A7708647AAF65FBA2FD95E843D839E5734D4C08A215180C7244924E002A965D8
AB29470A1B86065B4133A9A6EBA05EF1AC67DFB5ED8DD8C11450233D2624EFEF
3E6D3DCA7E23ADF174BC83AF25A1D7529E52D39C27DA86A2DF4BE4F8A96361CE
7025BC1954C75A765ABC95B4AFE0AF5474653E6808F85893BE6ECA1A37F8B666
05A9E9FBAADB0DD86848D6FC48A1000FAB396F756513798E09D29ED6DBCC8466
40181BB71C92CAAF8E240E16304DB9F4B0FB6880004A0F9AF6228E60646647D1
669577DA709B4FDB8721B95B07B4599652A303FFCEBF858A41F08BF3B83EBD31
74EFA947A8ABFC7467D6CC544B655A7BD4B6A4F5EA9BF11CFC9CDCE14FEEDEC5
9116A3FEF962932F8B105BC4C51744916E8976815AC286B1E682D83091E9C533
839223A68B9D977C41107F597E05C3D8C1C3E79542A990B0E8E22F34BBDD8E47
B6C2CAF54B72E8F0E8A41DB343934FD2C33B6D77AF2E9061C4E76BF258CFD615
30AEAECE9D04569D358541C346C922A01D017BCE85D4F083AA9B6939D85EEF29
335D1BDCC9E6D5F7F58EC2BA2D8CE50CCB38AE6A2DE2F695B76831F8F591BEC4
EC6391563D18E4169151F552B5E1601B1DDA6F93E5C8B5F4FE63F5E002AA3C15
E0C8DE2C735EE00E9A2A01530FF37B7FEB0FB182A4E381CF1BBC80D743209814
F99002980CEBCBE3E677005766CE1D0AF4DCC9F103499D1961771FFBF01B833F
1701EF6EB1A381A287F73E519C01084241335905661B2E8B86B398C88F39BBC5
09FACC1344E15CC7685708BCB3F43EAD4E24A84AA0687FCE0A2178D9BA84EBB9
68E8A727DAF9A0B28A7CA3B119798603F9BBC6728C5A6B4BFC84C95DC4F36839
C2649E364CEA39A4EDBBA4C0E27C61648D38CA46B64E8CE797CA3464C80214EE
28A1E58B387AE0A663A39F04F57899ED62FB0E542EA108AC32490B4B2BC068F6
2087BE9C9C3CBFDD80F2E632BC4C971A79A0A3C3A5607B997223A9F6373EE51F
C58EBEE7756A391C91758A1F6567F532A5EB762A2927F57CF9F0E845E4F66B3D
8100D1795B706FD32944CEF24A054650EC911A54A22F4F35E3034AC70F07C98B
8DD43BE9F7D68C50D6449791F5331A189706D9CD18417348B9F296D8D01368E3
2523FCC0EF33B998FE925B4CC7BE329B32D6AF791BFFACB60E4874412C8C8676
34914A453A592C7614AEE5001DF3E5E8D9335A155C65174B940E1AE61ACBCBD8
A41D7E1C6FC0680E094ECF65C60CE714E6EB2A1897D8A3F39FF58D64EF7E9A41
4CD8E55BE32CE8CA29239A9BE3FD6B1DD5CA5A035AB1FE57CAFACB8A39B6A877
C853BE6BAAEF5714982FBFA414EC128B61326B60D83076E690FDCBE3D2AD256B
FA7A15B804402826684AAD933E94853CD0CDEA3CCA7DC833E486F431EC4764DB
F3FB244DB99FA0CA2FA14DFA75A326385B3AF92AF8E4C6D437DC3DCC07FAF25B
6C0F270333ED377B08E498BC3004C25C7A991DAC9A3E0D1FC43E2EB6996C7269
7A864CEF35FE312DD8F87E37AC69490299CEF9B059EC7E7492D1D6E5640E0AC6
35B97F7A629B6B7CDF3BF86D2B518EA807B03E4F79DEA59C84D98E4C94102EE3
71A29649ED75F5ED02EFEED8064E2D54E8F9CA0C4284B987B81B7F41FD7DCAC4
FB9C3ED70774F9FD09F3321CE1D0319C1129F5868DABBD183045984748C8A3E4
53E085818729A1353B13C78E63E837DE483E9E2ABFDAD16534420BE4D7976D35
F56B86EEB90F663E9778A6E0CD698E6324EC2D19901972B74EDAB8F4073E4F37
89082F08735E8345BA167B2B76C77703C586CA5DAF41C0DD0E231184DECD8A9C
DE8FD239B6CC636507A5BE6EE5283C06A1D8D59E98A31AA76F4D358DBC641DE2
ECE3D9F2D262FE2E878E909A950A7642A3F59995519D541B96D459F24F12682A
9AE61FC08CF436D9DF060DAAA90884A1281B370A2F824704B5347FEC65E14E7E
3D212E29723427BBB12C1CB91B28CA47D6FA8259A875EDAE4B49C33B2F73938A
784C1E7A7F21873CAD55A868A1451B070A3F259A983293289B131E07C903D7A6
3CC66CEF8C4D2B6736282896A2683EEB944B67240CAC5FBD8A1392A875245A9E
2611B511909A041846063E465473D41958104E92519C0F86706AD640FC6CEA10
620C9718C4589D9D562D8810CF6F461B776D5A1B040F8272D43C029C2A695D2E
86CF508C4AB11104E575E13C2EF56914E241279BE0558CD3D59D25BF13CE8212
3D7AD1F25FA5A9155AA06306C7CD0F49E3498856318B0ADF279731E1769839EF
98657EE73CF07B0585EECB67F5FF609E0E3DA1B78F6A8FBE2F2E0C051237AB4B
1587DD72BBFD962E865EAE0CAF1A5C592F5019C7533BAF297C0F78F3287838D6
CEBFC8B5969486A5134DA76B4961C8056E1EF1F2AD17F19D7998175D66B3149A
2CF21CCABA281EA0345EF50C1EBE7004ED495C6D03963B639A66638A43C049C6
DCD311B5F86EBC814BE42D432EEC87B861FCBA9C8729FA5AE87E20C5B30B8E5A
BB41189A42B9853CA408BA01A559CAB722AAC3DA28E70AD79E1BBC8B6FCC937C
180B5C2E20B03D3FBAC60C83F765CDCDB3146FE5C0B02911F6E120D63EDFB0B0
86CCF83C2AB62922450206D3701588B54A8B232126BE120432E6BB2E25C50B13
708D742A44E20176C54FF89F4589B10D5396C94625AEA1914AC168899FE7AE9A
7D90DA67A5EF3DDA25CCBB18DBAC3AF4AB889528A381542185821B96CCFB4302
987611DD5B5B8514FDD7F5148D1BAC9C34567F75EDAB317E0B8A7A76604A42F3
1D46332C4791006DD1AB657308CDBBC7314592707EB163326E345C2C5EA05B33
01FEA5B7A346E6B1B6EF58B692150C6116B149B6A26B493674337A9C1CB4F42B
A7A80AC587F9BBD7A487F407EBBF9978840A01B5E7E772DF7EF28481E7AD14F2
424816AAA958320A0E6F318C757A474F7B05AC0F570094372CDE877B479AE3F4
90C257A2B3F443DE43D8A58594BE8D4B5C7E5E075ACFB1AFAD4C06415266E168
FB38C1CA256287953EDAB1D40537A3633CB52FECF3D35BEB8C2C6CBEECB54BBA
CD6E043EEF68A21D7639FAB8D1006B1119CF92350D9773502F7554B4B3036EA3
D747596506FC674DC01ADEA9B45ADC43B9E6947235E9BA30FF462252038D91D1
D908E9132A946FD03B86A08885AC44CEE72F0E27AA63A901F2DCCB86D87702D9
A66F35F06D6640115B075B0260FB116E24E795E24DAE988CD48A95FFD3116E92
63D02221D272531186E2AAB74496FB78A4064C9C9772608C49D46E40FE28088E
B5109171E7AF69599BD8BC1186C196EB11FB4132F5C9FC1395220392E17B66E2
32215E54E9483196341D6DC691FCCEFBD00DFF4C095FA8AB36A374BD5E1F5082
730A698AAB7B57A5399196ABCF7B7963E2970CCAC5E9A5EC552CDBE1E2EE1968
B81CF5BDDFF9D385C9C1FFD726A0C52A4CB0C8121E77AEA16157C1EDCD1AEFF5
5607E8F5C44072DC54332B95AF28417E2D45B4685F270821EB6C455AC147F938
50CC9F7F2006D933D0664AADBF5D7E3E6DAD57527AB59DDD13BCA392B059FAD2
E7833AD00F62EB89CD7BECA9DD479F7CD7C981859EF43CBB1EC1681081B58A39
2CEC9FEC039082771E1BF48968431F72817C8156D0D6B65DD33D472BCC49496D
1F5FB1796892C6A45BCC65BECF41D8604B811824739647D87A7B28FDB3574478
9807DA2557F411E0BA7479F31B9E3BBE6F3CAAA653883A9D2BEF2073F47F057A
CFD20BE1371F17F5B6F0A9520F2EFCC3C04A24EC272C43E1F587ACDAFEAD7076
6139D04FD9A50F67301D7765109C76D6270D2DECC94017A877EF386AC7F625C0
ABCA9A6D15D71AF7A5889403DDB83EDE87EF5A69EEA97995CC1601160B296750
32AD8D65A456F5471AD4536F1AF41A4D370203F897686CAE7C89577D3A843E90
9C08CF3E3D489625256DA5E0984BF971E0D8D251AE5B09C17883CE07750051DF
770B920AABB2E80A4944EF613891B4EC3F9E214339AEDFDD5DD15240933DC82C
D878BCB743ACBB562A41BBD86191E1129718826681FD12981D4159C7432DC3D9
AD4C6C478EEEA0A34030BDD0B9122E8AE5F0B473AC5A48346D56C2DE42815D19
FE378D252960D3F56654B31C58CBBBE0D634FF6EB81295809AF12222C58345C0
4595590B2DAEF5F3CCACE8AD4CE8585DF4099665B05B32FC49160ED307573D18
6C4D88C07CCD1BD4A0179BDDE6524D8CC9A70318578646EE6F4DE040C56C90C3
C5C5827A77DB584E95F55F083D07AF133B31DB611D1831D93180F66A13E86AAD
573C57B42DA521764563F69E7D4E26057622C17A135716EBB2552F644065C733
451295216950B589D09E00FE06779D50AA82A4653649B7CDCA11A1FF27AFA7FF
189A798A6DD355CE23F77BF90DD88672ED1AE3C262A2071CD9E6E8710E44EA18
8EAF3FC2FD7A203792FD5A925E03F5FDF5FC3C0D975724B9C0EB5891CFFFAAF7
AC4180C714BFB1BC100B055AEC13D255FDD48CDE21EFBBE6A2A5CCC75DEAEB75
CA1B5C649CF209DAF2ED786DC4D0E02F1AEFAA8A7B2B96971E35DE1AEB60A50B
B4E5B18753CB1E6E18FD08BF00E01DB6497645F29D666701A930476B878C7843
D729490D64FDFA946762B2F71AFD7E3CD2A7B155D6445774A471A84FD5CDEF48
1419EBD5CA76742B84B005FD3D7F5D0A278A2A31A7CD7C0D648206F8C3E6B3B1
EA6245C4C49276675068DFEDE6CCC05F61819E9DAC54AD9555949328E013E277
A06934298F0B30CC1FEFA6199BE837961E5F44188426EB0B29895832FFC8E094
EB0F93A5E4835906D5FD2BD3B2228503302077170C0A1A77FD63309E7B3390B5
A853FBCA4ED79884BD215D97CCED66D53DBCAC1488404474D8D5BDD67C3C85D4
0B0523422E9E6F39CDA64204AC941A2D82027DC9BB43F5A42760B5553A5353C6
83AE4B1EDBB5DF0BACD8C98E799D96DDE8647DBDCAF3C44298974C679B2DEA78
8340A67409346C291264030B60A5813A7A02FA98D950074288403115B15C579B
D24054ACB417474D8F6478D34A3C8C42D787232AED3901829A17BB04C09640E6
44CEB64C87E69EF98FB51699AB23B6DAE01C94EED32679FEA86404BF95030489
5C06BBCFA34DDB76FC5FCB4A825C2D2A836D8CFC0068AF46422D4BCD473F2C27
06CC520EDDD8A901220A975DB7C974C32EF57690F39B2F980049FB8568A3EEED
6A736858E0FF66AE6C6AF48101D51BCF0E562893625F08588C59045E653564AB
23CF32E0DD3245BFB584A315C85CF0B2820516721F4216BD64E1F7C1474A4C60
8F2730AC2291CD13E5DA9EDB2A0DEEFB982D63635A5824147B00D2C0EA3BDE4D
74253DF7DE3227A56E1FA4CCE7DDCA699F859F3A79F54FF108FDFE4347872D88
79560B54234D66E18091E256BDDB9EE137AE62402C6FD68A6D12B10DA7FA0856
4658F0A4ACFB0C50BF11C31F95C2963BA3CAE076A251DBA4B3B7EE6B89EC5F39
7BA8753C9BF088089BC5EDDA88A5AAB8444424CF3A0A9C00456E530678DDB9F5
5529699F94C87D15020F1AF566834969BCE02221C34D6F65390457C4F72C6B0B
BD5BB4169797490247C2006A809BCF2BF1A4DC5793D2C472DAD4D6B8A7F86225
FAB3583437208D4C8E644A680924630D13C8205DE87280206EBD841075BB25B7
7DF33DF794E2DF40E679BB0E8614763E0D5CCE49A37C4BC4CEB5D38ABB0A6AA6
0898BFCDB09868D63DE7BDFF6F7DDFDD70A6BEDAABD3FB18DA40364CD0B0C348
8CFE0C5AD0F53F318D41E88DF420F9E9D2216E989F189E9BA0173203D06EA8FA
761AD977ACE7D0E00C81609A9027353F47181DEFDEAA0989E87AE04BADC9156B
75387FC41149C16FB1DF0E25D71214D6C2DCD6801B56262452CDB4A0CA9A179B
308DCCFFFF294A05E42751E585843ED3A9BCB516CCEE30CB9F0FEFAEDA625269
DD309D8F7793A6CF0C6B940177D1B6D80B274387ECDFBC49E95A71DE1A52AE0A
5586B571FEFF422D90A482BF312BD71E370929FCAA72F4DAADA7B0768D6B738F
D1CB28E0431ABEB9AFE8D18CD0D24E578F61C87AD97E9BB5EE074E6E7912896E
4BE7F2F313CB7EB268D47B673401CE91BCF7B868D1CA716386680B100C503EF5
660F01657350606AEF72DB2FEC5020E57850D03433ABECAEC9DF81829ADAD03B
A23615136361368591EB783773E7987406E61F1126592523CC7C0D4172816DF9
B504269EF34690D340194A243CA4EE3E2FC1B29902497DA15E55D4FC1531B77D
8A612B69940B4B6DC01F41F753973D94A858CC3AACD242C340E5D6E8E0857177
64005007360270443E199D722D1B4F71DFE883569CCA2C16A0BD832BAB269989
1DF2DBC984BD8945910A84FE2407164C7E14A4944AD970B84F6703FB95DDF97B
336A92D7736D6C8F57945BFF0D3389E3A4939C152ACE834CAE270F4D8A4B997A
EAE6718371E4C704DEA6B7B4FEC1D20C4E775CC2B2F73ED6D3E9439D9309AF59
EA0788B1CE6A3D400793EE3C58E0C70B04D8E7C777B4A17619534BD3D258D5C1
2D22AE57138EFB769ECCF49C88851F6B37063E01EB8AC105C14EE74271B41697
22C945D90E874A04A8583C7830E2FAECCE5C561B94705763A82A3D719B05366D
E18336D8340A22F09A1F200F58B4FC86018B96F842899A17F3ADF7256629DD28
443764242D7D0E7439056BF02CF4DF13632FABCF4C0F9BE6FF73AD9CA6EAD20D
98E518680AAD2CD4BB5744C3F68ABEE385783DC1610AE47324ED37C3444622EC
CE8B91F476BF7A883A8002BB333F2C318D57F31830BCD9C2BB4761A95FF17523
3E55F664FA9E910BD8B9E09F58DC1DC80FE6C5C81B4CB981DBEFB179D971550E
73A56F30F52492DA18470AFB5FCCF75C7674783E158EF40AEC605FE7D8C0460C
569895B3147016208B45F079089B4558049906C287FE8E0D74B0DF681FF01815
01606A859A22074422DC5D1E1C4241F8B8337C4200EFB86F166486A5BEAFE2C3
115E76317F9125C3758FE82A1EC9551220CC36ADE3891EE6FB2978CECFEB2718
B82659E2C5EB7CBC7F85E2BB394D75CDB2A3E6E5250E8172BAB448E31BB18AF4
020BE82432424F811993FB5247920F41E86F2D4EEB99233A636DDADE2E5D15CD
718BEB1E528BABC93B921D38F426657D968CDA03AA42C71EF6CC2B7E52A3BCF9
109A7D839F6B61B2FF1525CB78AC808A0E96C6D1C93C6B8F3D8572046DE1467E
5314E71217ADA8BCCA7B254A5C6113CBFEDC6414684E780BA4B66389E0423236
3FCEC7A9FB5D69DE3196B59C4A11C5BE487158027934838C30226A5BA37EF80B
E273B0212914E6A0BF676D06F58F682FAA3CA45E6CF6C4E7752FD0CBEB2609C7
0FF9FD36507862FDFC0F4DF94070009E852164FF3678B94F3AB8D644BF6074C0
650B75ED8E3BF2A85FA0C51E95C85B8A9382FF60B8672A8C34D5219C7876B2C2
065139E0860D883923C30FC42CB772C814D707CA2B55CC595AB286E8672B9CA8
F9731E745F2BA8ED27ACF298A90844BD782BEB6E57AB21D4F28A09442ED31664
5BAC46312AD734E6E8C143D17D683C5557F9ED6F0EDC926B808008488CBDB6E4
4FFF4FFC6A99829068BACCFDE6436E8DD74C33AB2E6B06BBF93231A1B88BD3EF
F576B375462104576544CF73ED3176873D4A9FC83E8775FB74E119CEF2499AC5
2413563C2A18219D071FD6EE789F5DFFC6EF29CF7C6B400E29AB5ED171F74DCB
8154F910CFBDCFB16DC3AEF7192096783479E101CEB7C5828B73E1D4A96FD60E
1F502BCB3B30D82CB5D46F02C8929007CFBDDC415DAAA8837645A940156CFC69
20716794B6ACA5D17716F8798EFF7A3648874A0BB97C6F20E0B6313C96FCC225
96A92B35E87A3C238B1438B9B17B0B51B7B9AB0A69C94BB35DF3F6C8809D5DD2
DF34629930AC13A51D4723924A2AF3486C9B9647DA2D8B535BAFF2EF0DFE2B6D
E51216E36DBACCB6F29EA64D36315C4F049739CC4BCAB2913E876C5F0F7D7AED
3E2B98E5DFE2D8A02301BCCE18455250F4C8E9A09732700C0998129C2A62A1F9
48C4A7BEE0379D11F2F25412D180A23E5303E9213333643E74D415650DFEE350
021831F293F6C41C54860A3BC196D940752E4587ABB633CDAAB12A0114B9A7A2
A90805DF3A10AF1174B5731F525AD5968E1FD61E7948671AAFAFF698F060CF71
C4242BCEC2C0AC8C48E9809D672AF07197C46592661AF51938FE002B29D43C7A
559B8DAEA49E019C4EA310251FD20BEE1A15727181773BFE62189E89CC5D3245
18FAF0199332B73CF3B0BFDBD4BFA3B786D8B94A35180F181A704347B255984A
E68655D3E000EAAAC9B5677F41C663C9F8CB828EA592E76F480081F1FE474AFF
03CE4DD83EC645240AB8B4D26FFD369078E10E7F0E8F3471E036DAF42EF45C52
79F881DBFAF84329C9351B7C21D08735A9FDCB05DA57464859AC83E988B0D557
355B3088A90A556166104D8F5BB27E212B8301BDAACA3CE5EF931A2CC59B8A46
A47124A62CB1690BCE633B4773144BF4DE9ECF60B5B42F8191A1A9625292442E
3706647BFA2641D68424F611472FF6F7BD20920FDE24DC9E50AFB558500DC0E7
AA86FFA2579E6F4E3DBDC3D57C7578B8E480B381467EB217BD431828DBC8428C
2E61CF8C90BD66EDC7DEF192330764520CFC6050293904A5A9C46EFD2FD2882F
935E7EE66D88384BA24AAA30189C556C2A0E6F2F268ECB2D3C22CBF90780207E
46A92FB866EC11A739CB24E886DD66736B5A4D69E43D6D4312FDCEA9A9EF458C
72B8F6D674B536B4A402D550D699A85396040AD26296332256A045CE8ACA3DFF
1B0EFA227F1E19BC6D6ACEF11929AE8839D3830CFA0D26FC94F98D44480BC343
073EBBBC77E3DDF5137EE9B66B12192916ACC5C2C56E513B10B81B0D8A089BAC
8AA8AADE199B899C0E40FE2D83F7835070A743EE4B38B5B9D431B77F9A95640E
D95548D9272614A77801E4B6E9A210A1FF5D37DC8DEE7352C2D0D4B78676A18B
2DA72DA3B33FCF121F569BF4AF744EEBDA0CA3EFD3B7D9274869C05EB1018FC3
3C0A80BD644694F0F3BA3972353D1D66E6885C4FCE0E431A7409B68AA6225B74
B650248BDFADEF533E6403C798EFC8FBEA1CDF666EC856CE37FC45EA05977126
3B7C3CAEC8ACE4F4359D69C28B1D9920512CB65A08057D3C3E105777A91A5A48
40274ED3E04ABBDBA1728B0FFE3CFBC80DE72C76C8399DB46CB13CCECFC10BD4
87496131F4EA287F4F241885F4484E406534EC8C4D9E2E61602A87B434DA4CD3
404C1C45E049D23C4AEAEF6B6503782D1F00847543304BA928F458929D900236
C5476DD1DA192378343BC2557FADC139EB966E3631F70CE056AF840F30F57C07
7240D9B4C2CE12CE8CCAC7CA1F569E93494C4E66F8ACF44FF4F0A228A4DD0A99
283F14E88EF5342F5D7AF0E1AB265AE7248698ED711B940AD56AA69FE260A52C
CF7A66035D7346EEDB6AABBAA0F6455C22F2A97FB0ABD96F22AC2C7BEC6A56E5
682D5A27BE353F684537E5E72A943D8D2274F0B3C9055640A144E6AD8EE759E5
6C687D277B0A9B13232A67A15B9DB09E943262F2E6EFB2845BEE444982712957
5FE3B29277F34B3F513B7DF3110EBB350C252099A4F34674E5CD4A545BFF1B57
44380E366D992EE0429663C1BF00A885001A0FBDEBF9598F51AFF4F244935E60
0549379CB02B8D5C74CD2CA4F26164F19B955B3A7ADCD7B8DBF8D5A3F87B5A3D
693AC300A0B24CDD5B73E3F57EB2E5B63EBA817899D550F5600AA8036B612AD8
B6B710EE7C80415ECB73F5F6F90F2BD5333412E4545802C5BD3E81F45C7DFFC1
AA6B4AB5FDDE6B80C3A6FC7FBADE9FCF88D255A2A38B41650913EFEDE9E5EB32
627B93AA289FFA3B4EE1D0F3E117D1A1F23E28E3CC0CB1110E1B3C90325DB506
D17C5D32DC611AE0391C4DE103C1E10BECB2C175BBBCCF5D8A10AAE78115059E
32E075A37C6CE66283D3FAA48637C818B1CF698BA9D9A0A4E745EB137218C347
C0C1FD89AF187E46260A27D77ED0D0A9F36EF5929366DD442E24D50DFBB54B93
E365B5CE6397988FB57058E21285CF44B7ED473B248FD8E93FF545ED848C871C
11E5B5D31F12A57D1CD6C19DFA7EE8E814B89B2FB14F1345213207B6C60B7C42
528E8BD55E514118CABE1B1EBDAFAE21E5BB99463DA82DD193554EC3785B1FE1
AAFFBDC9F8150EA155B80396EC1F9750CA12D460F972FD02194F29C6BCD0515E
90F34D7E25DCAE933EA17DE2C234709C88A952FBE719A080B441B88FDD6F78C8
6139BD1A3BB3BB65E3397AA5678DC3AA7A459CAA95E2FDABE890A8D340909850
3CDD492CD9CE7FF662C8E7E1DBD20E9D10CBFE9672238BF209CA24093F11C3ED
E3A666F5C53FBC5B8307954003001CC2989CA863ECF81EE159CDDFD3735D16D1
973CC9691648EA6C9488393D3A5425BE27AF570A8E9937CF08A713AB8C4E6341
92F2DA50975E18C5D28B5B6AC9E2588E0187729F4379BFEF8F28AC137BB2898E
6919FCA7355B2B254C8F0E2EA8726C44A1204FE554E60691809829D4E6E0DB7C
E178E2D5E82B27403B2F8CC77162F279A5270B929BB80644D10156C80B812594
29CA6C34615360AA7CAACAC85A5AE933692F6007A533FFBB807547980392D3AE
98C3E1ACE8F6E0B047F02CD049BD555AE7AE958A1CBF48E6C26FA5C3A7D9570C
250FA43951FBF59E697A7D68B6B1BCB517D7C337833DD53BDD7A33DF10807854
7BCEC70EE774A988CC8BF78A032FC00C5EB38A7EEEB7AB1213CC259B82D5A009
505C8FDC561064D78BACBAC7810EE97266F9D9AC9F16B42508C41ED3CDCE3D7E
D84231B89137AD6770A0E5060DEFFBBDA7D44DF5063E02C929F1692B3746B482
83B8947AFFCEA335672B08E81DD9C5360B07F84B5ABD4F8F7B77040609F190E3
D7C3E5BAD855653B0457B5FEA4E9888AD8DF5A2FE32261C1E2C48B22C6222E30
BB280BE625C9B1C3A8F7178A4E3CBF0F420F0ABBBDB3BD18BC84558086958FF8
3979D3DC8A5A1DAE3967099E3A56FB94DF7382B2ED4AF329F4E196BACE378298
C6679DAB8D38868F169D44EC30F1FA0D6E7350BBCB186A0CC069BBFB91F6C9D7
F7AB2A2B8C26DE9CFF1153AAE208D7D8EC7A99949E7DDBA79C0FBE453884D217
81691251C2AF3CF7963E6ACA1A2365E93A8412D814A4693AA83C2699240D3BA8
47AE79C0C7596E61997B8C3E293E36E1A321A453F00DF29ABCEF40D00A469E66
9475BD49DC03C541D5CFF30E99F7A7A3C54AF9FEBAB30D9FEC16CCA6FEB5A0C3
A940F774D97DB05EC6D955F36AB0CFDBF379C71D6CFA89F7991B473167A13794
3E40C9B7FC6CD142BC1033E328BED19A09ADA8904FE6D9A532D0F6E5FB9ACE5B
45D9A7083A2BF7CB624638D143300601DDC8557FB6FA3785F44FE6DDD89EDC8D
E5144B82A82FE81B9654C2AA6DF06BE7084047EF71EFBB10DD10932B7D4F278B
2D695C2386439C4283C1CB6C7C2C57AFD18D230B0CA81DF7008198CE95C59A3D
9CB1B4A916C5CC30C10689B0E77C6B26773265254FE0D0FA8B65FE407F22CB54
FAF73DBE50707DC35B2B5BA6A7738D1D95919C6AC4C1A325622E39D903F133E9
64D9E2005820E902F9A8FE1358ECB1ED38BF654A231725C3BF98811E177455CB
E26D31D26D37C91F4E63B848B230074DFC79E2AA0ABEC8ADD4A5A5BA587AF261
168CBAAF4F7D1CE380C86EE3419C1C675B70AB4421728447529738A30A700371
3E552F33D0029E0BEC1396282F88425415CF73BB5A5AAD7514FE385B857C8351
A0C102C8BF402F34E948D44FF70D402307FE8E2228B9D5F65522536BCF81F53D
0ECCAFB9586CBDC58DA2A7BE0A9573DA9C30AC91333A0296AD7E7ACD16B8E22B
56028DF4D1C319E9008BF2082F6F064729406E4D2567DAF02C4F8ACF4C499A86
D95F75010DA5D0BF1C6A0667D2029A8563A498A3A18ED6E78276359DA867DE46
23F6E2D45F9BE2E0CF023188DC006EA83B30E085217A3F438FC40518C916736E
407FFD8AAD462F348060BB5968BA59E1C2B7D28203C6296FA95491C928393458
47907DF936D6BB1E87D85B445D1CEA39A26FC98550864C99A9A2C1142E074DB2
2EA0F599F52D9660999B3185B6D9D4DB3CFB4FDDDF4FC7DE23929058DDAF78E4
EB45565C9B5ABBF93337095DE687E9081700AA9F3F57EFEBDCA15D9DC9D84387
BFB412FE673C4242A87B820CF04E5D983F43D30C9395B2EA9877543A64B99BA9
0281CB0349067041858C3AAC884F76AFDE6B30E724082694271DCF6CDA2629F9
392C7EB4D7101F9EE19CF0C865574246424B9715FAEFE191A9EFEFA35E5382FE
9D23F19E6AC28EC4A61DE25DD46033AF16A2088B07A41FB94C94286C88E21AE6
785FC7DB2528BCB40EA4887B82A53F32EEE419C76A13C41173F1642F97707FC8
65DB8C06EFF681032B814B246982B56E6EECA1E27BD5C4536D88EEB46FEFCA9E
A4EF7F8778A626CBDD0E2F29DB0E403B5BC4F215E9214101AC2B50C4D82593B1
1D9F6154556D7AA92D9141B096531DFEE95FC14387E10F2B1C1DE297E6D4A251
E9200D0A0557A4B6A182622B42864411C4506C629AE63CB0B9304F39111976D8
2180BDB1BDA7D334169643063F7666275BF80AF6251DD846FA86C4499710137C
987406099E34883597B9345EE675C70ADA291E9D56F201EF4A96B0D21F26D81A
6BE3F321D329F82133778F6BF268637EB5F218FA02C22563DC2E4B2ED29C0DE4
A96BE1BA4986D24605BBC1A4C8BB575893F0B085403FFA0E5266009D946EA5AB
A6A1F3B84C57E93170DB3DAC2DC33B6F21C11C4E777D031DDE5464C007CDBAAF
2C0ECD78F101377879A7B3A894552C78211802EDEBAAB4A4AD02E3404213C6A9
4A7AC462AB63C8CD7E8719BDFBA88E5B3B4578165A85740BBA726E08588EE167
2A28CB47BFF16C05D2C50A38448813DC9527BA9A20D650D6D6F0C9E7FB8A69C2
0BA38119550705DCEF80CEF18642247A71E513D0589FFB7DCF3FB74BBAAD126A
F5492174E2377BDA5B44BC84EBDB25F218D75D0DC2874E4145E61E2B843D4123
A4433D66D93F81AB8121EE931E51CC3F2BAAF44834DA5F3BCC978529BF788AF2
925BCBA9248BE39602816A700576229F41FC085899A91DBFD7BA080D069472BF
D98011C291D480A9264721A88AB2F4975F85422A602D70AE3E32420462D37EE6
E2239E9BBCB00B50C6BA88F39509B927AA3A08CA75AD3AE84ADEB409BAFEBFCC
8FA4D42117109F8D475C3B5164D37B4ED2C58AEC4CF1F97B7CAC3076DB97C302
A6B4B42C596FF3FA899DC7236550E954A818721EFD766EB47294BF1604BD2A8B
5156C004ACC53C433D5CA15E4079F81AB15E82286A1A7FAC1A73AB96E3CF2712
CE18B510A99DAB6BBF1FCFC67335A12AD1CAD1C31DE5EB8075228AD1723ED90B
6994FCEC48682E59F609F44E8959EB45D6ADA4FF3282B9A981A1646E013A1AAE
338229A7CCC3086849D6AF8E8908222DAE2F8267E00CFBF4D4AC5C2BFDC446E8
217D6ADAB5643D7C17B835E5AECB87CC6F731FAC9A5D7383047A28B96A97EAFD
58EA8BA1A25BE057EF97F5ACB161BA8A1F3159A9A0EF3DF727FC19A63AEC7FDA
45FEB812C7A4D4CCB074B29277D71D68D2F13BB7DCFFA5B76F98025C8073B42D
4A77908CA9A4F6BEECAE7AAC3AE51CEFD4CA8C2ABB048355D9D33565939C9394
95C96D132CD73703681FAFF10D3D5FCD1754DC3867813936A520391320F0A2D5
B1E5B479C4A0DB64A9755F1D6523177FD11E2525521F61DABFE4B752220B77BA
5DFF57B3304102FBA5515A256735912441A4D581F6ECF6DF34F4A0D4E90CD3E6
5162FAB38F92F8B67C7861C628C6FDC55D2DAF1248FF4C079D5F7D5109E98EA4
8ED2A079BC4AF7F6B731CF7D6E0D75F34478010702F7A0FF6E86BFAB33AEB567
16F95A17A9025C1F435FFE8453408045D60B59327B534D7360F5DA8FDB4B5C0C
84AD4927DFBA2B7E8AD3C980E0758DF404CC4C896A1CE7FB6A65C6DEA39F01B8
ED8E68B9EF21E8187F33895023C19A7702B86E11821DDDE74B04F9D19B5E8D93
CC3664212FE6FB354C27586FCD5F235A184E4F9F5F6FFA8CFC9D8B7AD1D4C1EF
9AE99FF411834F9C59C96E13AD2763EABD7B4F01D80633F9FA2EAE8F5DF89869
63690D5C902F46699B956A3BD96DBDD1086D7692523C65C08F7935A54C23E3AD
2D3DE9DEF5815D6E3BA07AC0E6118D617481D853AFFDA9AF3FD28F4DB485A0A3
DAB997DB21F799BDD5A9FEC78C7127707B0D4DB08283F9BD6C4FA6CC25C0A052
BBB9B9C029815649EBD5655DCA9E0F59176BF4550A31DA30BD1A0AC04FBEBD88
B4D474C369AAA99F5CFB846969333F11D82EF5F1FC9464B560FDB516C44EAACE
59837899C91716E5A349FC3CECA4184EB52CE8977FE457CA1D8430DE4706C057
16E968FD4B9A7D008A48C93EE41CE378804761A0ECC1FF4BAE9C4BB49213C8A9
0AFC4B234A7D1DF91A1DEE2F6878BB6B90256A90A0FE1A42983955D8B059E515
024D0E4F98EF0726C6DBDD0B324E0215C862FF0C057E5DF42C0D5AF547B4BEF2
CCD5C7D93481648BD31E5565B14309E46A7EE0AEBBD542CA1DD25B1694EFE40B
8572C4E70CE460EA9F44C6584F09CE644EC7899AA228AA96A16F91B93D6CB898
28F97D28BEE4621111F0EA780C296B27EE6DD9E6D4D16F01CE1D2856C6EE9AAF
CBDBE7FB4ABBEA7B4CCABE3D61796F3741AF6963F72031E292FAA534A5F317B3
32C8A33B9DA7B1D383EC4311D0367EE87206ACAEBF1909D11482AC7700828F86
FC5536C55DD103D65370AEA38176109AEC73DF7CC54DF66E0E732B65559DEF91
8E18DB53437A6CFD7506D0AE5BD3C1AC74A49BE9EB5972567C90D82F558ACC7A
DD219C8642D499FE3D558D9C1006E4C4E1AED1D85C0E4E2B26D606463D33B365
9C52AA5BC5323B135D313413DEB7CD019965FF58F711B78EA0122E160E23EA87
2E954132F8BC93FD6AC9C20E291696FAD533E041DF0B9F23B4A66EBC50365FBD
F117342E5101567BED235EB7F86B216B3C9CEB0487D34718F599D505C9F9BA02
C15451EB459D3159CE8BE3CEEB2F2D603D0D77D9E32B228A139C5CFEFAA187E8
7308FC07201E0074166E3F2412C0C21F500B1D52C39D793ADB7DDAA513F3E117
F55954F66309F41D5FA227869781
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTI12
%!PS-AdobeFont-1.0: CMTI12 003.002
%%Title: CMTI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI12 known{/CMTI12 findfont dup/UniqueID known{dup
/UniqueID get 5000829 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI12 def
/FontBBox {-36 -251 1103 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI12.) readonly def
/FullName (CMTI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 69 /E put
dup 71 /G put
dup 74 /J put
dup 76 /L put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5E0311AE44B83C3E
4FBCDB0B74ABB18FDD877252FD3501E05E597A77D142BED9940318B98D508672
4ECF79C43A857674E4DCF2556325CA8CC1C432E54543F706987376A084BF512F
0E4C517917FB1D607C83E479DD094240C3F309A57561CDF8496722F1D3EBF6FA
45CD3D7D810E2C07D39BFE08C0A25FD568DD37C2D182E5D30A7B2855BAD24559
D455B29B1F723BE1C4F827D72B1156DC2C1EEA76C9B27733FBB23ED36F61919B
4A6E8253C8C05F3D4BDC64B99B8494F7C37E9C19DB6A9CA8E9B0F9E7E3346EE0
EF416016CEE932E53A26599DD8CD09D77DF591A9D532AAD3E321CDCB28636809
E61D9EC969F2E27190A475407B90211902429778103D18665A681B0DD51F6E92
58D1288E2AB3FAEF05854938FEFFD3B4F376AAD303ECD28B23649E5D4C3CB85A
5C9CDCD1853BBF3282BCB5CF57720C6CF7AE468048D7AE5BCD2F15DEC1B33B5F
9917BF69BB64261CF101BB47A09E47D6508250374D00ACEC3E3FE8C5330AD9DB
9D9F60CC170F2FD6DEA12DA24CEA846E25ED6683A213E4FFD0BA239894C920B0
EFF562ED994A7A46F8EE2AF98F88317E513A06AB82A629979AAD3ACE316E7074
01EAD920A9E1D54E8FBD623773429C58A2964B498990E8420E5F7A45B3D4342C
1AC109FA67D4BF33C9D1E0E2973BB8B2495DDF5A7F8E306A0C712BD7A7FC98C7
44B26D102D3CD44A320FE89CBA6B3AB39627DA4679A5BB7C27276B34ED66260F
DEB659189A797BC41D05323454CA4600A6D840CA3C1DC31BB7FEE8DE367B8177
3F1546C9EA98FA9F7CD61F177CEC2950526D54A6E7A0038F2B20609E7BE31EFB
51FDB6829852937071FEAAA3A0E51E625D7FBF2F7C224467C7DB77F7AFE006A5
418CF691841AB7A9923506845BFE066769A01A51EA48840E898FC6FF0ED9C2A6
1DB61E8840029ED92A129D38CAFAD4084B17679A84A262D2F9376363D4B5E46B
1C94302E5CD24CBE93A27319A8F79138414B2E94CE6F78C6F06B544D5862C2C6
297EFE524BBEF0CC2C32F63CDCE433E19B52BF0C2C7064E3ACD429E2466BB85A
ED82C6EDC8AF5D75855B43A61504128F75C2DAF7F5C4405BE36C136CB809DF31
A40E0DEE80C10F6E6442CDCEDEF8DD0C01FB2C035A1D136693D366552862A421
81A290080EB8A3C5160FC2CD760A69F8254E8B0EC8E7280EC33802EC2668C149
73CADCFBD4E56A1E7A9CDA3F6A50E00AA536B02B4BBF4CE60B7A791098C3E434
B5A7F17D6E461FEE23C6C8C148C54D14345DECB7A619E56268131F65F86C51B0
E45860D46A1A798134AB3283BC8B73D9B39EC5D0C1241A85AA46B02E51DE6433
60BEAC76351AB35D8DBFD60C6F12F8B32E08C671E0269174E1E142E687B1C558
5668FDA480255261DC29288FF5ED56B50DD8512BD4948F31F14C71CB4F8FEFEC
DD8E4F4EBE9C28312640334BE454634EF26B5FD02A93210D487AA4F3AF284479
303995AD31F4A6DD2C2DCDED3380D50EA1D8743A3C6561CBF4DE91634374DE87
FED0CF17C73B49060648AC6AF2921D19FFE1B7C7E76AA84600078A0160160D5B
BFAA2007AE70640698BBBFEBFA5C11F351610023F563840413AF6934156D93B6
551069D681492EE73D480D648503801A921E37868B4ABBB013B628772DAC3683
3E44C318352E7700094ED0FF624AE560D2A783343B266FB925AE0D990B65F8E4
7A9725F23F0A08EFA08F81616A5D51E5EC31CD1BA229A89AB63ED782A6D716C7
1F00BA66A3158CDEAE3399653D7A29193760AD92F65C066A4DF35F91BDE771B1
74E17E4879428B5692343AA963A349064693B52F14B09C5F4B329C4AF4078998
D3F6C1046538F989C8AE84AE032A112C3E657907EE7A844B14C6A0FA8C9A1CD9
797E195186C478057525CBCCAA0FFB09F67F97E69BC402F6199B6900D9F285E6
47D359B1728728770C95B1A85E22D2132FDE7075F8FA1123F62504E53AB106D7
99B33689D55D0BC0C552745C5129CEF9F874850240FA6BF5F4779E35BF15A8F9
F425ED40480C60FE3ED85173E620320A462092834C0BCF6EFF9F1D5912CEB941
9C18D8EED5CA36CF2C7D3965BB0929EDBF7FC997A9CFE79A9FA9C54A11E1F421
7F3FA4ABB80A3C60E9165DBFB0EA765BD21846FD1260F1AA4644CBE05CEC736E
638311023F9F51F4C0166733A32BC1F615C8D9256E44BE8C2FFEC45B7B612FCB
21C52DB57E87EC8E166498AA8A4528B7C612E3BB8117D6BAF5CA8F9D038C1430
B7EA8699F31ACDC03774AEDDF6B73233944A1A89ECBAED2EFBD30DDF42821846
AF828EC54BEA6E7312B3255A7F55783C5D4AF1D9780A9670C9C7E02A50535A13
6D957F895D53E4E18A4B4263695DF2BD9626E717D5C3B80E908E59EF5D093798
7215550A5613AB86D67C1F89C95FBB0E6ACCAAB397479D483AEE4607E111EF34
2FD92DC7F991B6AE84BC7CB982D819A17022ECFEFFB981A6F678655A6278825F
0EFB5733C5F46529EF1FBB01C6BA7413BA9211251C0A70A470F735A96F6E0D45
DB1342D6B97ABC234790D346C74927F5C910F71918D615CA907984F0229E3F54
4F5F75AFF784C7A470DDCFFC308ADF6EF43979DD3B54C6A8DF3B53DB783B81E3
9C57413C3A317419C190F207720743084DC20288C1AD08B8B0FD4ED805FBA8B5
BB874DCE4AE93AE3B8A117612787DA6C8C7512191BC36F6D8AA38F39099474AE
CD570CB5570BBA932C9C7A63DD386CABF1956FF87C266BF145ED5D27547234BD
943841047FE9A41C24B82FD3D3EA49A56C56840B1B359FB2A3F28E10AB09AECA
2FE2520DEE9B5542591E72ACE610DA4BF31C6E204574DC78033008F019519B2F
E45C99F1B938D212602E824CA1CA020211420C77FF545DF586702451B0923EDA
CA15BFF98CF2F0A56404591E57F7C89CAC6D22E0FEF9094770CF003801E5CC08
110B272A50805F89C0BB5C2966B9385C26F4A5008AAD97A29408A5116BE613CD
5ED9F85D2BCDE96FCF3121D5EE1D455A4CB03BF2AC33493FEEBEB955EF737F7A
EABF96C137DD84B3EA39C61CE95B5967405CEF17D9CF1BDD1199346F95E77CB8
5FA2D38D858DAEF10D0DD660211C8C4C69EF58B60DEDE48DF76300EAB8F0A547
6DBC87BEE8DD4EDFE3020BA56F362503AFA62D8C13BB270C3884560E227AFABB
5D810B2B092531A679485FCFFB88BA8313646B644A35C413053DECCD4B371450
18F54701F610E52E727AE8D25A8093B60093FAF775B6414F66F43F517488B4A4
00AA4F672A34A73531218601904A7F50A045E80CD804D028EAFF506EDA1ED998
ECF16435C6CA8E203F2A813506F4B8CDAC0A3D69F4B704AB80F170EC87B7C732
AEFCBA3BF4050A9CFADB87F7AD4B53BECE197C10A2E84571A640328B90E9A294
73F6CDDE4F4AF9F1F3A257BD130454CF95D390ECA95FC4221D5041E71D65FC21
8323BA5A3335E2E905E33D5BA56BBBC9CC30D25764A066D013B116E693C56762
4F683F112A572C2C04ED041CF7BB4FAB0D899B3F2679B431E8993A650184CB4B
1B391B39929AF803F868245A69C964B560A274B07DFCB88A6508082DD6092E38
80D9187A146B60B225CA22F593AA6B4B7EE1EE41A0D375C4FA69EC6C8E02B54F
B855D385C973A7223DE22465D039D213315C35F0D079E8CD030F62993495B2EB
A0F9BA98565F89D2E09BB60D90B0CFFFF1F0845810ED27CC8F1088F74D48A30D
7FA0728498E78A381B0169B7678520EB5769522BB5838212D32C8C1ED5635753
EAA3C14E6640BC34D43EC162711996E0CABBBDE0932FCB6B2838C22C0E42DCE7
1BC85E372F24C1145655D59CCD50EA6E1A673CB0342BB744A43EA1B9104CF736
324E367D82ED67E01B0608294A91386045C1564E4E417E1A62EFBC148C0B4A56
73A98AE2F2433164740B839F851F9C38124B3C01CD976128DF6A06FEFE14B960
4573E748370D70F9FBFDBF875584852E70264766FA5CE893F74D0D5884889178
078CB149821A743D797E9577A7D27E7ED607349CB2CC6968A7CE402DF9A55069
4A985B517B714C603F993944CC64083DE3D5F969F9C5913C297E8493D310CA42
795C94740A5E5D3415CE7B4A5AA11A940D93992329D8B00213244405BBE73958
37CD65B6AEBCCB2263B937F671FFF3C6314D400983E5AEB6A34709D854FDD0AA
3D27A62BB23E253E6E2CA994294009B857B5F1FFB66E772A0BF9D83F4F72B89F
51B125AC9E495343C9D84A4BB4759DA4D2ADA38A195C7905CE288FD8634ED996
9068F0DC8DD08F3D3A1288A271E7F7EC4AF76EF6A78C47BAD95FA14A3AB690E1
19A13639774593D77FC1610D7F1E25A31AF94C5354B35500B8E57B0F65AC82C2
2A519581B587F5E3C941734A4269842D38F74E89C2AADB8ADB3D16542B0485BF
BD4F1EDB4064E96A330D735F73789614C8D606DC553A0A2409CF4C595AE51505
CF203817971BD7F9B3346C036A18FECA44CE1C2042BA4E7FFA3FFEB6371A06F9
30082F47FE87B207E13A68BCA122968AD74CF6A12EF6767988F0EB0CB64981C9
30D9717F6C7D07F4B37CFDD68EE4480C0CA305AFA4BD21DFE131D6715E839973
E1271BF576F70C2F8C6827B3EF02CCA123EA46A02B2722E06078C3D9B3743CDE
45B43B561743264277D0D1FCACDDA80E5C6185E90F82D1DA4DC076B6BE49D2BE
F03EF513F1861CF66D2B7F8D52C7A5C21DF1276B72CC1CDAAB5A16D20722A95F
8B1EB6E6B605D3878831204A0EFC95CB3C5B588D4F0A540D466D13B8468ECDC1
DB08D36E7FA19709A67A0FA08421053EEC9068ED464D29BB1BEDD0BA88882707
9F41334C3BD3F995321711B6ABDE3C12A8907F930F7AF490D774A05398ED03D6
789D91B4DACEA3D8EE11C2CD850A6EF4128B60EDE9BD37710F43836EF6D53FD2
D8123F81EC6F01A93A8B36FAE49692E7276F7CDCCB09F332ECE359E3E7DB2364
A60B192438FD158B18CB3EB40FD28F74A740367F02D5CB6B53959A0D11BDF388
9AAEE02F0E96AE2F802FF08BF778F26DBBAC8F5AA04CF3AEB180235BFDE493DA
4D0B13E0B61696A8ACE4FF7A09956A1896B2875E5B2BDBA09DA08B9589957E85
51084D76A00FB728E286CCFD2F53088158005599835B18F6F5AAAA6051270AF2
59F7BF641B0AF4E79F4491725189B89E57CD10B442B8EF89345D04EE3E18EC98
217D81FFB1B473B9562605F7B0AC3FA8CFB798A988E5FF20F068A6B2399C71B8
2E3C19E58601B0AD3872170B0AE8FA33F3A50EC5E67EC22C00D3DDDCD7B592E1
0D1CF31DAA48D10F7C6A56CA052A5AE914EE08CEE011FFF20D00B46A7738C434
D70F1040C611168D2C1851DBA89DA526428E6D5DDA244AA267AE3559B0C7DC8F
AAE1687F823CE628AAD59999E74DFFACCF7D3412B466F6C3A315D8AA3350FB18
9EBE417717C42F3201D19E1870A2A3424E96F1A9734F32E85DF220E08C4DDF8A
AE6F3491A3C805578924F36C146CBAF1D38C8C18D18E5A9B38236BD3E6B9E5BA
595F66A2A8DE9F52C9DFE00ABA5B99806A87D2EA39EF2C3A8D94FBFCB0CB5345
9AC36328B89AA13E4BBFAD70314009B0A2588847B7092C9EB938DD069CFA3679
73D9CF01F9756B931B34E70F4A5F1C41FC577515A5CDC49FE2C9A13D62E7E612
2AA5969248241BEAEEA5CAD34154EF5F9153D85ACD6FBD6B7F2834BC65C77E27
5ED803220949B14126BFAAC7728CAE16EF205F408232C5D7B83AFDB9C2191997
38005204EF424640DE1163B577274FB455EC0383BC6CC17F35112AB638743DEF
9954A5B2DF6A50DAA8662967E8E2208A9D1E3506309A9EC4C001CF91896E79A1
F3F6FE998DDF7C7971707CF7DF7415F6D42EE28620C0A225A1B9E389F397F972
552E566F748613EA1FD417CAA7B90A2BEC1AB07F44BB8AB6ED829F2D7F4DD597
989617E6BEF5E701498823382DEFC2D5FD078DF888DDCA99E62890AC0E5BE8BE
0CB662B561A49D2221847151D203457C797A904BCB5A1D68A51EEA20A167047C
36FF0FDD999E46C857864D1CE7568CE9518230418124EE5E51FD96C0FD8EB7BC
2A49F49AD72BB71F849B112147271000A77F41CF476AD687E6BC3DFDDE0CDE1D
ABE816BF31348D25FE0A11FE7F5559BEDFC24A14F91BB73BE7F5FA95DA24D705
3DA96E8D05B84A1E5BFB0F15D7D4638CE4C63B74404128CF56A016180EAA054B
85FEE6937681557D0B5BC3C560947D456F48D7F4CB7A5EED52B103281B152E3F
ADCE8B98497B74B05096AABA261D2A2EF56572904ACE2866C6A081C926BAC3E0
DE02EBB63FA29197B3812809F08A9E3D5ECFFF751E60F7082749F57352040E06
CAF9290336395684E85FA2446FBF1D0223F74B0D3464B06975010B83D0975181
3DB6C0E2967CFBDAFBD555018305184953487AFAE112D36E696DB8A18F3E3A74
C8B123F16D077DBBC85A226A26D406F622858EB7F1646BC0093A7C9711A1DCD2
6302B0611AC20A3870195D8BBA4E8E4F2CC73030B2354308CF8C06D68DD7FA14
87CE9D6FC7A8A356AA2DC356231B4993655A0FF55AF67090E2947C2B7FB9E96C
EAAF52A01ABA6D69B738D6E3D4B2CF1E037D991EB5943BB0E6AB3868138CBF20
A112805F4CC00C65A4BE86D7492C23E34CC0BEEFAA0403E2AC21FD33D7A7FD09
9DCAC0BE550881647B322FE5806735FD993F5ED7C62173AB29095F67A626B9F3
20829E4788786C978B4BC9BAB9B3A750F130F9D4AFDA6EA3A7DF09D7615951D1
0C783A653F0BBFC23902019BA276A6D7944F1A34C1EC7E2710091C0B94CC3938
01C50C5E4A9C19F47D69074023F574D7A7302565EF9920A8E2A5076E6E3DDD2F
409CF1AB8BCE348FE63A136E03A520DDACA32571675AEB94D761B7B625AF1626
8BA9ED761E12A52C511890DAF1F790857C3C9FD3FD033A8330CD8E19266FE888
76AB1F3B3C8BA1FFCF3A6CA570290FC1640B6C4231D8346BD346E647D138B2B7
F7861E2C7C7C4431E3E91E318BA1DF8338AD4EB4AC104EBE7AAD8F5A09E6AB3A
48B9EB51A85277B221E3A22AAF38219B681918DBBB2F77FA8AA27F310159C763
A6E66D93879B592289B919B425FD7A367B7820FF430100E1EAE0877F84326FCF
5F1DD99964BC6BEB63528D2B218CCE41024EA2CE703959071A65EDE99127EFB8
0CC01566E5E52DB32D01512383A7711C7770AE17A71E5D95629642AA79CD5F01
D37FC89696F25C2EE4DD70DBDECEFA4FA2CD5D2F8ACE75937D2B1FEC7A31A893
16D314D800AFD3EA28068983A2ED3A7C75A5570F30A2824A47D6A789AC554C3C
A78C2DE9771B86F73C66EF8E1D0FD046DD4F19A31EEAEE04D5F38B73C623F326
F146C7164C9B18B5EED2113363092ADE0ABF0D7BD4C10BE9766F81C34878B236
1A0FD6D8AB4BC7E3C01F1C880C3A9186E4006210D22EB64CD7690FDA750EAE7E
C87A9D29128D49082578ECC0BC977D91E9CBB1ECC0D3527DC0ACAB39402015F1
B067FC5E7705586D97E81F8911FC2BC8E7C077384AAD4DDDEDBEF65CA4B75F6E
39E41528CF53CADA928537D557B518BB740593A6E4D0100ACBF126FF20888342
A0D3D7C201C4CDE8CBF59A1BA4F924E4EBC3E02883D5FDF2C8249AD8117332E1
BB52D2F621115C0F98037D4D5C406402E7BF68F44292B23D0A21CEBBFA93D2D5
ECA280DE8FF9B9F217B616852E0BD028891BCE072BC4032BD0C6B9CAB13BBC13
9E14CD0C577C792E33459D996A287241C295F86EB0E0B3451208C9376BCC6D45
CA8B4F0E07386748574975A677652AFBD27526C8FB89E7E8106F129AA2644EC0
87D61BD7F509234968915C6A9FAB3B5964CA2A2E99F5CC0FB11B03D11C7B42A3
174AC5EA24B0C9920CC4A8F933F7D7E71505B73C16EAECBF9CE841C993A9AF08
4A8D824D37E3535F70298A06FD9B25C5A131393E493937F2894347D2F6149305
7FD140C9199043DBB893028DF2BDB905AC21D7F169B18C1C7E3D58F03DD5B51F
D511379081395C74A130326A3B4E7E0F281960A504C315704A8CAECF4B655C38
46F0E74EB7824657CA11582014DE38609AB9B1A35E9E0544E4AE8839EDEFEA9D
648A7AE9B8A5610F8CE0F1E7226536AA7589E6118B332B7B3B42882D38069098
168361D8DE5C0637FA036FB8F4DD44A0429B059915807CF540314F06D98FCFC5
A26F4170ED8A0AE9719000F5A04EA2B971E297E396349CCE3D47F08D0FFB0687
BD9484F2D6B94F1246E993EAA394EC8D26CAF4410353EC7435BD7CF395576976
0084BD4E101FFE13A3BF30E7390F6722E256E62AC6683CAD2165FCE86BF6DBA9
4FCBED8E082C0C67D16E2ADF1C0BAC703FE749977DFCB5F5978A3FC55B70197A
FFF8730A4689105D5ACF0CC47D6B40109CC1FA04ABC51B7387FBEFFB54B0B8B5
06388DCF4E75257A84D4C266DD2D11D8724DC47071382DDBF6072C781C7A75A1
F69DE55126FE5F2875677FAC016F57CF2EC7E12EB62D7DF6F5DE19BF0217FE5A
772C0C0CBCCB4E8949D6041018B5A8D3088297943C95A1C5EC49EEBF56956231
0D1FE220F4A12267F2104ECA4FCEAF8720AABB2CD8926468DD035CEBE8725F17
FABC67FF0D807B122C1CBD28C74C4B637CA47B2E1ADE901B8B0335DF4A4B85A7
A87FAD29A068CD22461A43CAE7DF894063D476858225A96570F8F390D6C08282
F3ECE170EED8CA803E56CFDDA4E0FCFFC7EFE00F14544AC92B1A07D45BBD28B2
11D16C2043D39800E80AF87018C12A9FA898EBE2334D6DD302C5524AED0283CB
49D2FD1E85E3412EF937DD98B1CA321647A1742CCDE720D53CE367C5445EAEA5
0B46CD77E96782487D05F0722855AB99AB793A87F4E23244BFBD652F3F7460E8
FB6F9D516C3A82DDF5EA81A0663EB77B4EE18BFB8D953D910485556A1E0B2AF8
9A7D6D3485443EE2DD744A8CB475169D01F30268507D893CD416F8E9BD7B4D01
85EAFA68873876731ADCA9744AAB1F8F12D2C9939B5F2499F50FA043473693D7
5E932F4C4E9380D7E8C7174BE76DE2E3C10D3DE3A7A0F966FED3CB43777673EF
A95B1FB784989194D96BCF96C8A936967F7C313CBDBA72BE7C295A8E2DEB04D0
B79F04EF841C467380919B310E71164AB2585C1F71B5DCE6C215CD2D3D3BBA57
81A3BB0134C087B10FECF734279C31C560DB793F284B60AF15DF8C7519B5787B
F1F237D97EC7699BE354B94A87FA526363851120C07DEB9A3A0586245FE897F8
63E5D62957D8CBEDA775E1D468BB8EF486B225D45999D328F1FC87B0A9899D21
079195A0C93695395C2B5786838AC4984964BD3C3E33B8383971D421090130FC
461ADF16FE66A6B6152FB90056158684872C8C24AE3702A8F7FF1561A0EB4DC1
035EAD31B22E6CBAA369C10AA4ED26D81655E2086237CBF4996109175B20479F
2420FD48F60CA3574CDF583B1167D90F8A650A65B3D06D80081DEDE5CEC6E026
44045145F407D71376E0C960FC8DD8350723FE50192274F9FE5FAD8DB274583F
3ACA369CBE805E42513F2501A2B48B5DFDC80C2DB2949B36BDF8E2AB72B37F67
9E293C01F854718383309C079B3C129CF5728E3E47299ED0D08FFEA28E1B3C3A
E7008B0281489A10E68731A34ADE941D93558EF011F2E62EE194EBE81F74A62C
0F7CB0C07614993E1D42D5AAEE8CE9858267EE789419777107047D3AAD166373
08D3BA48C60ADA3EE562CD4432CE74EE8DCADDFB1DE7295FD92EF783CB0930E2
FCD32F207BE0A5DA235D8D48E324E650655307F40FCE9A6B3F99369D0A25C646
1E334DED088C51CF1CFF762AFAB73B7CF4F1077C0BE6244D7AD0A465FC8FE2E7
1B6F494E418B47D29D9C74CA1D67E035E8684C4562AFF20407FD90ECB5FDC994
19A2ABFD2536491D83ABB42FCC19C4047625D4F3E9A7D071CD8643314C7F9506
7C4FF226029EC279D7C5D77A19AD94E4B631DC502F6CF71AB49FF6EEA600AEAD
A3FBC7C02A4A259010B5C1D56EAD35DEBA67507433C6A18F98CD01E3537A4392
00D6EB300E882E4129973B0B81E3D50B3817ACE07D21845C3B7C4BFDD473C3F9
A0508241E2557DE36BB4C285B345CC06DBE98FE9230E273303CE36E8F9A82D47
D997442C950D23E69CB159F257F957A329266DB7CD42B72B2D160A9BED2A853A
277C62E3441FA522AEB0A9E0B3FE3222990E16D68A41310D65F3DC8AC3B2D6EF
4CC90DCE84479E9F2662CBD314705FA9FD80733B9497499DB791503F781EEF98
298D36F1DB11C005F512C9B2BB567E02EE78DE32E321DE86648CCF88C1B116A5
76305C4F0E8037E8329526C2DA823E795C63A9B135612B0B3910AAF94924BE91
9F901804AB172985493053CC621ED7EC20F134B259C858B42367533EAA6D3C9E
C941606D52CC9C5271EDA8E0F62AF68BC2B83B61D59CF0D9E572225BE444D2A5
6614AAE99643CC7B94B95F808702A5B385FCC6DB1EC15A878F2D05378A68FA8F
E1CA84F249A1078F55844EB529FDE75040131D2303D2BE476F7724EEEDAA0407
84E407BF2F3BA42F99FDEB4017C636D9E79F62BBD738389BB75EC5108FE982C9
C9241FC585B42B2543A2DA69BCF11B91E3052AA071BB3CE1995F73B539B3F05D
B848B375E530E83313D7D181EEC481909E89E9EB53E5C80E6F245DFC7DB60859
31580D983652D6F6789679AAC72E16A80E8A548E6246B9B62A98BE0023D822EF
7E9ED642ECBC90A40A2F1E4768C4C2C692182C59B7B34022AB09D51DE4136813
EE1A27C62A5D5E785EEB7C9DA59B232AA0AE1C575CE1610C6EBD0035DE08851A
C9C03D1F6C71013B17B9D1EB5DA12A76833843BA9EF78E769C15F20879CAF0DF
D33A0ADA22C6863683A3B2F684FFFCFE114C0DABA62DD2779DCC7C8597EC32CB
F5D7A18AA0F53C66C36CC9DBD47D4CED6A92C02FA74BC3D52593A475A4A43A44
CB11D9C7D237EBC948499F97C2B3F27ABAC4BB30323798CC498D34A015BD1634
CCFC3F2608C9CCE212A274F464E1D6E4BF0E3329BC64048AE3D17EFFB4CD7A15
410CC637DFDA2364643D263D48828742EA4298DD1BAD11B4A0B4AE9AD36290B7
26D803E428D176F08013B3FF9E9E17870F7194A0DFA29EA131D482990C7068DF
B4DF619137AAA1F457434B5B4C35F15EB7AA12B8A23BD813E48C1C2FFE0F388E
D1C54A8073E6CC4646323C7834F52CF72A9DB8A51112FC0C3C8847390AE1CD89
4C14DF72CC3ABAAC5C7C5DC2D70AC99FCB6E916374B372E3E0C0D14246A03FC1
18110209571E6D859CF2CC19DF55A1E1DDD1251DEFD37256B7B690F872DB9D7C
246A5D18D1FA702B1C4722164EB8E7F0477D94111E7DB230E1AA4FBEB62E7831
8891FFE2AD14EA2B3C6DBAB0D35947DBED71B000A9A0A42D0ECB0DAF39E8D6A8
97962EBECE05165877065E76978763C2C74968F092084C5A6E7A480E34B6E3E3
5F7B9E1F5F2707268B984ADC4F983DDC6F95DB105F55A75A24DF8EF158907D46
E44B0F60576EA75FB53EAEC3C349F1AF08179CE0E8B688F91922C1066F0A7A8C
AC350C094FA7D67E69535C9916F17365AA3741CAF9C3D6D278DD6682A94B788B
28612FCD9A46DFEE7EDAECF9861525C7441C2FE608D95111545E3C7B52F4BC76
343D31EB0B4C377CCC5C30214FA21059F04BD5E1B059A69142520EAD7C3988B3
77C47A8E58B1A2A3464E32A67C3B646CB9C6D8CFBF0790DC2781755DE45F0FC9
07FA1DB58E294EC9A081FE7911265E5A4F4BD7CF18486E333A0E587E45AC1767
95B4645440CA786F2F10B0161A3EAF336DDCD4B38E2AB89DDCC2D5B38D30E77A
60532B3D051492F4A2D9F36691EF1540E5BD2F400CD53F954FB5B15565CE4E11
7C003B2DE3684E55A791036D6993AFF73E9DD51588DF08FA37292F828A9887DF
AE1AE7725119C5832F310E495CCE3A061A83A5283713214C195DF9221B8FA838
090A5DA840FBCC67DE2602DA41784C5E2F4C80F3E83E419A6B7E8B8558F42DB0
736E907DF595C8D702FA11B262ECE328EB81C7E9A4D97D301618568D247B0BBC
5C313DBE1ED9B0BC1EE50CDC3C21A076F2F3F8C84111C4EB44C0B76920799EE1
1206CE744146D5C8A55D2FAEBF33A50E77CAF08E22C25079AE7727667E5176DB
45F4B7EC44FE4677FD4946DB0C5F257BBF3AA3E98EEB9EF15F9C3CAEC9B21FAA
E35C649EBFD9B170CCD12C285B98C3469F79AC8C207C2BBFF179A3E6B1F96CF0
7E602518E894107AAAFB3973959AEDD89F7035AD3546F444332FE1E3FC91864C
760F1F5E6FC60F640BE1E1902A7CAB610BE9710C22EA84559BD27F58F82B8B66
3D534D4EFEC8C1F6BA361C36A895CFEBC2F884CFB32E93D3A20D6E00D8B9739F
03CA3B977E729F8E4ED3F7175B3D5E4A26C92786E4B433E21629CF9FE938508B
A14EAF2752CC960D370A8B141283C0D4199DB55AD8217C02199F35ED5466C533
81099DA63D302CBC41025C10462908E6A9B0E24287F5FC9DC4B97219DD2A01B9
8796CF7B624F61813E4E21B12E8AD6B5574092F4136443949C2DC962D3F803DD
8430B1B8823F7FF18A7664E7A72C51BEB36DF68E141E2A920A7F97D914105808
45C027138D753617141F94C56B88E0CAB42E2748C7F79D622BAACCC47C98A3A4
376127049EFC02996FD9F97BD685291AAB33934A15564C49278DB474BFACE33D
DDDA493DFC93A773E20CE90A1FE210A87E8228BABC792176FED7394F20ADC0ED
4780D554A3B58AEAF1DDCD61EACB1572E5028A2166019C345B8EE60CDB3CE0E4
41442CA1DC5A82AF32E9D15752F0DE93634CCB442BFDC352432913EBDF4B5CB8
542B39F4433FCE9A9CF5D571682522BAB651665F5165535F5F70DF338A5945F3
7CDF6B3D5AF544F18861810FE41ABB02D9F066471D4C9BD4AAA06C605C237D7F
5218A3AE677D1F5682CC247C3F2FF79A6DA8933C69AF34A619D2852E1C315406
B4BD388C5D236A36F45A6D290BC9D614EC8A728870DADA0BF6721DA496959AFB
2ECBA1F854CA342359AA3162320D34D312D1A7FC91F7D2A0F3D1452CB628BEE4
F4EB6D613C7B6AF5EF9B9E1963013FC73684838B3EF9CDA509FB13BD08052D58
853902BEA412D103F70503EA696CD3A1F42C41867E131BC605AF86B74F5509BE
12B1B190014C5B3D13A595881229291A1DBFAEBC5DB16061BF271BEE3EA52058
DF44243DCF4F7EB9A65D885C90E8FB122FFE0D0F888A1C9DFE1456AEA7F221A9
34B1CB6C9114D7CABE5DDFB71502E95E2DEB53097DB15179E8821D7E8CAEB76E
013FF2C92148E0BFF54EF82B01A160C04299E9FA5383F13F9DA1B977C73E6F0C
7F4DF51E14C6CEE6B99EC025D9F9B9B6829CC669E10D702CCB3225CDB4F337BA
D97AC921A07DDCC5B8352DB4DF25E6097A206C910893B68D6191E4BACB103A3F
751979307C4D827350ACC146D793A1EAFAD63FC1FD86867C4666C8A7EA904D4F
CDF74E26D9496D477449C241552CE5ADFE746B6B1C7FD2F34C1FF0BF16B6B44A
BE9CA10733971CE88450868A7C836856A321325B55B57ABC4A64CD75644D27DC
7D1328BEC0CBE7A0E84A282B75D1018052A015E779F7E645B3ACD6288A804645
9FEA729C83BEDAB386C9B1EA2DD5D6838E0DB7D52FD4E81EC49B976C673EE19F
6F4A6D037E58A3E5CCC9B5EF666CC2D66C8BB3EDF66E8D9ADD98D46E274783A1
7FA55F75AEA944D49FD239730A891BD7AE0061889F5636C82D19CD7A7134DA60
5DCD081DB79EF2E5A02C873D36E159713F16FDE0DA3B571CEEE38F29BBB82ECB
C6F9871F8B9A99C0D02EF7328666FEE1060D849A397D9AC103380F1CC9D8A4D4
405FD6B2C9A58274EF381E35064D74AF3A8EE469DBA42625EC66766A466ECF55
AF194291DF41EA881ACE2BBDC995C80DD83BD3BC3B09DA7A66E754F3DA6498FE
A59D923BFBC732436ED5A9BEA73E653370F0886D5A2D447496F13E535A9C8D53
B3A45AB4819472A79F087A7E34699B4D86A42F1A7244841ED6742BA56C9E46AE
FBCE245656FECF252B9FCFB91F9436D41A29BBCC041714710ED0860F9EC35A5C
D4FEAC26F32A29BBB2CE0243A5F4371343147A4B8A7E8774B4ECA581A3E531E3
BA5F7E7CBB3783E4B00EEFA33DC75E3036E54E3CC004233D61F76028294F11A2
8897D99F5B0276EF188A6CC8760DBE3E3C0A8FF745B495F4545BC24430E027BD
C1D106FD2987048C5EDE208D98DED149A4F71BE3CF91FA11737D658A167EAE23
142EE95DAE272240A4EFFD6A548BE4C851792C49B42841945E75FF338B19210F
B949B8D0574DBAC2950DF8DF9356F5233569D76002BE72CE3D798665FFFDB106
A3E120B9606850689FF4CC1EB550CFB602299D5820B54CE09736DB8E999F1098
8BE7D061F5D789AC2A937BE0FF8CD4D07623FA6761ED729B3788195001670C35
BA140C0783F0087DCED4B684B52B006EDB74D4A4CE2762570DFA666B26E8164B
89AC141B2AFB2C847EAD9400A380FC17775415B3617F65847F9D203207DFEDB4
B9F8D849F21555DF5972368C3EC136BF4F2F38D62852F66CD9B4947731C5E27D
62E595CFA0CB2DAAE7854D05921DD7DAFDFD490BFD1F8AEBEADC3B120DB0EC43
9EE7CE80C6EE195EF6ED34F27D27914BE2D6D22878BFBBD27D597DF59C232890
E3F93CD408F06F6735D4DDF1DEC194EAAF2982FD2FD8B9D561D7FDE3D532AE72
3EFB974F147935
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 104 /h put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1D8E28E887EC5B2CA95FFD044FF2288FFDD68879C486B077F17522FE8DC
250FEA26AAA10C34F422BD8CCD4D8AA109D783F4524D67269B2EA07ED53238E8
8C349DEF074B9AC312E3B4515B13A6812DD6BB0B2612D1F51DE6FBE59180B6A5
2C1AA05D498174DFA8082B7800C16B7F28E6B09B54C31C15E785F5B66921C583
FC784D42E89C76182A01BD3C60F065583539881DC749DD8A3BE7A33AB1A230C1
542510B36A1B8A29D162A0BDAE5F135EBA017570BE3B3EB0C8F5142A8C2CF191
9579C0EA75BEBACBB97D16E062CD2AD35C9930F6FCECA4BB3C76A67E35733E1C
295205B1E8464636785474C2BB76025018B35B10CFB4CE6F92D90AB95066480C
21E4BB711B57A9DC885CAD3936CDB10B9F393ACCA33F36F970F106E2DEA146C6
94104D308A8467419880B399D3A995FCC0A373FD6279A877535A7AB4FB23FEFA
C75BDDE22B96EE63DF7832F59CA5FF6CE50A62BB1A0941932ADD8D6A8484F40B
3939259D57F8F69F564D1B2A96D1BC1E8995C96B4FA16D747AED1D42D72719FD
28C3146FCB2BBEEFA87F1A716AAE2B1A9B1B06AD4E0D0BB88C5E258C978B53DB
4C4F542680111D90C954F14A3E72FBC77EAA4C86CE289E5749CC3CD20082A9B9
55A9C44EA6B513108AF876DC728680DF9246789FA962714476364150B3BAAEFC
CB6AB8845066E8DC320390CC65DB059A5F3BF09CD97D79BEE0CB7386720F8EAA
7205F124A22014510D521A25A6F09EB82C11B5F09235F7E6CD3BDFD0836B1819
0E303D946C14110036EDAAD2447F649837F5940801D70F4EA27E1AB4CE25C69A
086209C31F94BAB0ED6F374013FAA86E751CE8C8B06A913BF043A5F9BF7CBEC4
CB9FC21A487B9EC18C6D506C3B81F4FE9A0C879E2AB0B165FDFA7F9874A37CB9
E3C4B8B6A9731F8824AF8CBDBB61E8F25F1CBE2882E750432530620E290EAB83
9D8F61D0945288770921600102854594CAF89C0DEABF9031B49679D24B0CAA89
D3ADB97655EA7E27115481CB81F2F6B2842A18E26988E84EA1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 37 /percent put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 58 /colon put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD2E141C0A7B647030FFD1FEAB8CE703C40802E0D32EF0DF87BBD5131CD110D
BF5A11D66FC2087779FCA72E245C6BFA23F60759FECFDF932C3026D4CC21D843
9789FD52FD7A85BEDF58DAB6334F4880C2C99F49C0F64025C76E0550BC4B8AC8
5C7E817DBABA0E78F36954E9922286067E92E69D23E9FD278CD5F26788A7E5D8
476DE8E21397716DBA03B23D85CC8B701EAA654C5EE74F40D6C3AA3F46E30A2E
E663C2CC64E2DA3631AB809AE1B70D89F53B1D72088642CD07D1DC4C7263A7EC
9785A2EBF8CA24D40E2C60CAF478FAFBEA8A27A55CE0320FE47E2512D88D1244
95CBCA87983B8795DBF00652DC3FFFF419BF24ABB01E9C6733556FC8C2A66217
C9CB40AD1A30527AF23D6941CB2E225B0378650B5DEEBC1629FD735A4A292A11
CF147E4C100FCA28B180590321533CFD004B4F6B313B41C4A7E6819EA23D9F87
5C001E76EE7212A7E8AD6AFB646F54CEC7C7C89AE855DA2B7DF0E3F7F35DF130
DC791E0C0EA283852C291F926FCC5123AB10E10A03AE12C23098B235D5F448AF
FB74D7518BD787DC530F7383E3B9EE0B0A882F18427AE270538596019CC8F875
257FD719D2378AA90A27A3CD4F5CDACA3263284A8A21EE4EEDD41FEF8F352320
A2FEC245C0464394C6A73A86807D46452EFE438C9A865EBF1139BC175BE00B95
E6E7294358A4D1F2F69C44E6D8814971C0300C978256EEC2D21A8441D3B5CEC7
FA799299FEF9C8CB3AABA92271168AD208A9854015917E94A45F736A747B17FB
FB3B2FDDD7600F1B4287479EF1CD43E7E9CEAEB727CB8F81DD39316787C19523
9F5A3B71BFD9F9BF3EE6910FE5989A0042A77CBA833B15E9760882AC662CB1C0
768C1019FE44496938672B95DBED86D370698E4FDE572E8ED9CC49DB53CA23CF
D193D551EDB70DE5CF11C90CE33C42FDD78D2B4E0659944BCBE5169700809A6E
90456739AEF9A3FB3CD8C66577EF285A847FDEFC244F56F6225458403AE2C1FB
070F80C2C336A97E833B212D11DE9B948DCC93AFCED40DDD2D0941E0008C85C2
D30BCFDD8167110E7517DC16992D447F9A52B88B524886A1C57CA3F1C0B5A282
CDB9F86C64830952E94E0785C3C4CC3C6BF99966710CBDB5616CBA74E14040DC
A0164DADA055D262AF279A8C03A974FE984B608FB8822858F4DF99FEA2543E25
87F7E68C4860C2B9ACB0CF4CEFF1A803A44AD176B81F24E9F4439EEAFECB3A44
43B29AE2645462EB4C70FE6AA063B80B79AEC39C78FE8366CB2408928CC93C8F
42F0306BF7DB961135093ECC9A932E3B8BF7126D7B0D3B0729959A3A7CB31227
211075DC12EE183F29769929E5396EAA6CAAA4196AEB92D8911D5858DD9C633E
8CE7D2533A6A82D490E29A256EC08178610EBA75D21BFD7D9F53C4F95350920C
DC3BF5A6B10A952D639626BBCAA0417AB25E074114CE37791C5095B4F1855030
6E208CEAB260EECCC8EEED9FC768EB02E57B2719F4739ADB5BF1D2A9C209072C
C921D0FF8743E1245D072CF848FEDAFA1AC1DAE8195C186F97AEE58D9DFCD907
55BC34930E57B5BAC214EC764A02FBFD0AEB254659CDB9194564CB7DC2C11758
2E6E416A4CF7D685105EC1BBAD157073C7AC147B6601D34A56D24FDB9F6B2C37
847DD21CE6176B0D887FE60A2AF69B9B913C8B0F93757CEBFF4EF5C8BF31DE38
4861F3DB08539A22BD0B5B976B6B9D44FADFEFC08F44F4CBE4D6C446D94A7317
8D52F1347FE6470920DFDE10E890464642580F1CC4F6246F0D51180A3DFF878F
99113ED26BF3BA9EF411F0D1AB94D7E47E9C2490C468C23DF8AA8E470AF4E071
309E558A5F9BF1A0AA9936465FA80226533387EA1A0A9891EC9C9F4A325FE42B
9145EDE853BB337640F07C00535754E8B77C7CC494E1E6E683D2545B0E4E6588
9366AFFD8FF196E63EEF1457BE6F2CC74C86DF05E561C58AE125E580F228E4B0
AB965D5ADEDA6C31DC8EB512FEA8DDF33083FD3C8A5CC513F106AE40F48D051C
08F31A3C5C33832759434483D57FB7E717E3D3C44A9282BCD4066A37B555E420
D4F75FC34063288B034F5D77BDFBA87D98AE0BCBCACCD80863A6B9851319F303
5E2038890DE96D46911133E941DB88B7AF0F526158E925EF074F8C71614A6EB9
A51A34FA6756CE9F5C12D95CC6B16BA73EE61E159BD8D7A34DFFC5630AF868E7
B8364E7925453FDBBD89B15849B2EA37567C372028A9A7CD5E5BF506927C94BF
9B3A8063BE84819335CE27281A6CD8C2FCAF73951078C80425CFBF28E98C89DB
9351A7EF75779FCC92072334AEA0C0A6C290489F5A944D9A9694755718B97E8D
30ADE5AD3AA941CEDD1F52ED4EA880189F96DB5101D5A9B99732BCEEE64E7ABA
17C8BC0C774F1FD13A8EB52E93370F0E56065E4468A4130AF6629BB96B54BAAD
EEC91949F2D4970ADF7AF32F08CC92C10496579907CE1FC794D4BD780C934418
5B8278D38BF36D483AD0BD0F93FE2DD01C1B43E64B21200E6F1CEBE6BFD3FA4D
6E3E62562BC8678181EDC091B034306B66D65E346CEF252C2F6F3271CDA3FFA4
FE8E9D610350A8DBE5FEDA2C51613EBB5DC8C508D35B24F45A1D7E131ABD16AD
CE3A99936E6D6561E72E040E83184F19F24EF99BBFDE248CADB522B1342D703C
3EB8E65B639614F8473CC11826878EE45FC27EB16ABB92F88D3DAA494A4B3B52
959BE0E0630BEBD7413CA2B5171D4B4093FDBBEE30391A80AF31BB68B07FBEEA
571AC443D1E7609F500AEC261F0CAF9CA00E0AE4134BD04D088D1429E891C9E3
067980E0731A0FF592150AB903C7971CE445CA672F2295153B5F67BA6268624E
DE8F3BE70CB6F0B37BC7A61E0A878CE234044806EC2DDBDD0604760ED3BF4C62
DDFDF3EA9CE9303D0183817180720DEB052243BC3E902FFE2325B3AC826B3D08
07F72A8BE1E2D9CB928BA33D61D0F1B59EE671BBFE63F4B414727722305E8ECD
6902A7E59691FF34B559FF3D4C524EECF01E317AE1E431052F4D210DF5CEE981
3BFC145CB913E73294F12E5ABFDD8679A82B1DF4A170FF1A530DCFF4992E005D
0AA23BE362EE497BFC783EC6E765F3250D192020A4499094B57436213CEED227
B97E41AEA8DBB99BFCE0D90339F2268B74CEF789EC1B5BD7403FFD6A5C04AD47
DE6FBD1106939D9739B1DE23E32FCDF0346A1A061C10DF572EF1E0D7CB55FFAA
E116B888B17257A57EC5C974E63D57EFAFD33644E9516A56A5E77438DD0B3090
A2A4AB9A20A96FA3E5CCCFF9C8C6305A412DA2E7214622A237B125CDEF455A71
A13AF057E61733BFF03CB86697A2EC5DFDB1DAE428DEA1FD81435658C536A1AC
5D8FA229F7698C7D3C4499C62E0F2B40C0633AC6880C639397437CEA89ECCA32
916300874706C9C7B910C23866CAC273CBC18CB677D582ED3CADB558593B89F5
466F2666E02B1BFC4D22F9551DBDEBCA1064757589A42D423A49D0ABBAE4FDE5
CD7E1BF858DECE6D6BF9D27E83CDF905D1B8666D36F97576CC402EECF81AF376
81F5BA614FD088425D7FF598766C0C818320C595F57FB479CF0BF981ABD6013A
D401B2F01838418A1CAFC7607DA9D8A148BCD02ED87836DB32DFF11DD157784D
0CE58DD4E3990466D0E773780D41AB1B0D987B6DC2B25FB8046FEDD8BC3CB07D
8830727F6993F1A2E3941F2F8827A6FD558BCE85492CEA45AEAA9D74D7D7F1A5
7F37A4071924A12A71472AFCE9153035057FE7AE2463F40DA8758C95E9FCC622
3B1E6CF05A6CF9224F092872760EB443FF3E00A32BB08D74BD3731D29A277FAE
1135F3D7B534020C24841901D61A7DD2C24D3C96716675CEA1297A562613807F
59586FC7D20B457C93752C9768422AAEC2331C05E60CCB745B5067585647AD08
7FC3A4C4A2138DF862FE2C735843A9673A9E830528C9CF4D1A5F32B6E647C9E7
A6726CACF8F9E0DBC7B7FA63C40DB32AFFF59AE27A0DAE6D6ACFB7FF8A58E2C4
D17D0AF66768C8C0719C85B418D6E1C0F344885E844067CAA40B1537A078D7AB
8BC8108946E4B66A069A809E89DF1BF97115687447D1AC30EB97F94ECF720ADE
36D8DA96C9D22981BDCD23AEE1C9D566323A03381C178C3D60B2BAA742C41A06
F78C032ACBB6D3B29AC09C168361D8DE5C0637D113693C649F379D1B4C51C225
BA008819DC17B8E7CCE55F59F508132078BDDD2B3D13AAA6488A9EE591FA905C
C473E3E676C955940F57A70383BB59921856F5EC556E8457A6D5F46F39249D2C
C7337CEA3DC50DD787CCD3AAF70590F72B45EF80ADBD0093E391B8AA0EDDDA00
C3D3AAE006F3F67737773F1974C440A6DD22ECC2CC4BB8E9C53CC2D727240D75
F6849609F2DA81F1B0C218D9CD4FFE9411FCACF4BCF2E9CA6D97FE7A6FC44920
E286422CDC86F13210999B1647582D91BAC2CFB8274D3C39C2AFC61829CFA11C
0656E1F11814532E1C72A9238B7322487B0FF6739E8B25D263E376138F85C85B
091D37DE8263E4F2DBA237982897A24EA1A739741428DDA12BEC327201A89B6E
E905840ABEF080D7B5CEC34962A2D7BCC7B56CF941B7E743B207E0700864340A
D843DDD86476757021F035576DD3ABC1EF4365D95F09DE5587076EF6C0047D46
BF3624493ED50AB68ABCC00107C3C759D5D70AD2E69FC8CFA6AA962CD2080C65
5D7F85F129FE51F611650CB97244F945E3382542CBF787BBB8F8E2C05C242DA4
755F1DB6E508EC2C25B207A9DE8D78A4ACEFC87DC4A5C5FC39818436CB54C3D7
8B8FA473F671BD8E7EE01DC4FE6C11AF92E141A1B3B69413B06A20C6A5C2834C
EE22C9A9910281134E02D897CF4B57D711BA687585EBBDA5EF19D5439BD75924
331A1A1C150F126FBF257B81EC5DE9312084DC3E38844DF14D2FABB64F6DCBF8
4C582B07D5F93784C1F2626B10CF5151B03CE63BA8E3B35C0BC7079A2C4D5E36
B59DA78761BAB02A7AF4E3887FC9A44FCA62D4ADC76F0DC0C5F1BF2A5078C89D
A8665BD5DD879B479CAF1E53B01A5CAC591282FD35A5736E886A79FAAEB4DC10
22ED6755C7C5BC0F9ED6D054324DE0F486E8853D8DA2F5931A6C00EF6CC9566D
D5FFF1E54D06A3522442BC103EB5DD3B3C5F8FB6DE593965733FEDD36F6B3D23
36011A0AA8AB2796F3F89600D865F79F979C86C74CC7DB341435D35312B4AFB5
6F7EB5F373DD0CDADEFC54FDED91C34F4A701120C9D9B48786EEF0A9056B4F31
72C3CADCA3C6E2892046C746FA99FE766273C349F2A6E6305CAA3FBCFBDF6159
D2703844667F332302BD51597BA292A11CF98EC99F7555963B07C7AE4396DA7F
4E01E2AB085046AB6DFC0774B2516584767247ECF0BC9BCFA81280E5E243EB6D
B775641F4A6465A52963F08F0A365D3CB8D169CF48F738595B6ABE06E5C8531D
66EF6D48A62299F44EC2F28914EB8007D4CBB78D4ED9045CEB5C480469A1FBE4
DF3176A053FA6456779FF63638BDEA32B8718209C90C87EB83E9B0934BA34414
8D1C44B49B3E63394A11EAA23647423FB4451B73B748A2D55DF528BD21929038
78D3412B66605A89A253EEB178FC44A984C454D186EAC9AF312C8496A943B108
C5FA3F0ED5963CAB9DB8F04B746312CEC849C21BAEF613EDF1E595983444F456
7F095F10F093815B062DEC72EFE5A1669B0530B3CE55FDE14CEC7880EAECB457
65D08EAD5597D6280E2A81B4B0849F7CC931C9E7336EC7DFB7E1AECBCDF99B01
A9F032BF3B4D4C59C27F58BE74D6B3ADA39D0DBEE45AD48A216DF03535DBBADF
854F3F2FC7F0EA08236B3407DF6A025B18847F95DDA610DDCF6631C69E8D6D3B
BA28DD171ACB096A90CED8C2F452A52CA7D63F4A32EEB6D4075F3C3CD05B8241
925539D1A7B28C9FEE6CA416A7BF03CA1DD8404BA14FA7117BFA56B83BD46A45
41A4F0D90A1EF00ADB43FF5E1D2D65DFB1F6170E42B3AAA9A4B487FBB36EBC33
668B9CFE07499DE8DB4363B947EACF299C153EBFED1AEB8A7F74996567076DD8
6B26C1BD88311723E7AE9476B8F7A4BCBB8E4B55579F6508FC7D5BC150F1D1AC
543E9CB904A15B69CDD165C1BB15F8CE3DB5200CC7F700A3E7496AA2F89B3D5D
A47BAC6B86D929E63392BE977C3B7C2D238BD1087BB75C91D60301C052A10A93
A3630328DFC8F69579319511E9A3C9C0FA17F955CF9EECCB4563F558D4FE6D28
3718CAC31D2789923E046DC744680546E663AD9958AC29FDBF5481B0FFE7116E
753FAB6F4BF4D7B3E308843DC239E8311CB68951C6BD27ECE97113FD276873C1
27F75B55CF67CF7E411FB3B414F83A982ED4DADACF60E3E39A58F0023930BA8B
DDA232E2F81CC1D03FB679FEFE2B7F6E38DB669AC1EC17C556629C95377E1409
DBE7B5FF6F1AF5701C55AFF3951EDACFF628B7CD1DC0080DF25D7EE3E9418CCB
D98B59277E139C4371DBF46DB011E8063BD7D6D4967035EDA00EB3E2E0141F99
66B3A8D39AFCDC0DF6FF3287F60BDE493A96C9959224BD05CBE158B63C4DA46E
EC7602BBC2CB5E4B4C79163F7CC903DFF4DEE1B128A1656AA34DCC5CC0BAC723
2416329CAE8BC6AA11420019F6E0449695C1F9B90C8527D93DBDF5B4F601BD21
AE7B17F36577DC3092524FFB3D169CBD18BBDF1BE65EBB4F6F2AC4EB7E4C2C9D
A427CF3A4C2FF5AF9A04538738D13339BA6FA1A356982EDBBBA048CABC1A46C4
28A03FAA602B72D1A5DAD7A0A798C59AD931034F671838F154C0ECCB8873EB7A
85E8978BD19B5ED84D704AB0DB22B06185A83FCD33E1D316D265070509485E63
EBAA48F2BA262DBAD0489969029CEC76B0B20817E1FBB91E459133DD7910800B
B48D04CC8EA876537CCA88F672014479AAE280D9C27709905A662BBF53A16884
58346234C0AD2C3A1C88C11E3B55DC612A839EA19208079E193939ED09F265ED
7544B70A41B7D52E1418DA390BC913E4F0ADBC7A7D757B61E7F2AEB2974751D4
4CC4A612EA0FB475B7D21B868734A2ECA75EF1DD15C116365D23BC82008BBB97
1F95F9C3B8838B803445CE8A8E480E62FB30BD016176DC8980BE30BAEF3FA3E5
FB609DF6D72B2048DEB8F8A761A9AD348EE98746B6165ED042AFC8229DEFA7E9
B5CF057D6B824FD9078E7BFABC22A0F3EEFE9AD081A98916DC2F20A6858C9002
F9BF5127730D1185EC8B56D092BD9A50326DB1C25DE35B795BD2C54F09D243EB
3FA4C94C8B0FDC1AD527732545242A1731E94070CC29ABDF3A74B77419EE9632
B5E293748B3B2D94AF688B0AFE3B7E62FBF53029D23F41DD71C2E7E76C8E9C06
5669ECE1102D403C500DA6C16DE3016878B9F776E5E4D8BE99A9A898024000F4
77DA028FE6F10F8D3AB46B3DCF4779B22E10A0FBCC9385DF79D876D6A22FDF49
6C269D4B6969F7006D93E95BC433825A887B9C3628F9DF44ECAA2C2F705F8BC5
AB0D96DF5BA3EF70BDD0D283F566231B432314CBA9C022F371D0AC63AA69F449
B25CC603F4B773C15DCF3AFC82169FDC3A6FEB71CA0537750925F694E0E15CD5
8973E880BE463395BC40ACB916499939A78AFADAD4C20EBA0B9524225939410B
8893E828C1AA2EAEE0EB9D267BFAD4569CF9E92F62BFE1AC55DB9B786A41C9C0
CC129B0E5291C7D44762F9F0E3B92B1118D142499C8C4B5300C759BBAEC64897
098D84ED7DDE87722FE1DB179C98C6707B5A384081830A0E680F3397D35C8873
16B8AFFCF7452905EC0992E7EB00FF973158E48E092325DB55DF4DD73F2FD377
7AAD66EAA79F242F8D9BE024E29779C1DD6472801DAD925DE502EE417A05D861
A7697817DD1B6A6513B9F3855EA999F1D90605E04420D48CC7A01498BD71E8C4
956E939D93221A7CE2AE512692824A6158A0299375F603BBED9FC2D4E737B058
3EF1AD01CB74AD67638FC1AD81CAFE15672B2ABB72E0749CE058ADF58D711FC6
85570DFBDEE0277B120B90923DCE5E4E6DBB93261ADE1B607AB252AFF4D22DA1
5D38C3D5345DC2FC2ACA2D9B7A5AECB83491CA754AC2F41E633AF9E55935A4CC
4C23472A379D42753F140FB1B05F14689AD1D6C303CE17B1AFC43BBC9FE38B20
70A2901AD91C41F348377A602A2DE086B0BF3B5F3A193E9654D1EA8E2B5E8AE7
17B74111365FB3181E7BACA0E3D22F560227E8C524DE363C118FA2A578BDDF0D
99241D30B8F105503C4662B67C690C93D6DA23CEDAF97DC57DC888E93CC2DA83
BE9215505291BFF39CD1522E603D8D3BFF552129AF51278C99BF590555879B7C
2E4535434CE68721B74F31C1649213637E435485C5B6562E26531AFD4CA3F850
B8488CAA762ABB888446031E02F03F1C9D0BA02C6023187F20BF7D79B76A465D
23A3EE0BB02513C156FF6056082FE1E9B46764E8AFA43AACE09DD1C858988681
2BEBB1A5EF8FB850B715FD20281CECA4FF3B0A7A47721C4F244ECBCF6623C51F
41FE9A5FD26584B68D51CCDC8DE616684A2C18DDC35E88A80EAC4EA6A3147093
028C32C58297293310A4C14AC155DCBC9D66AEF31CB5A1DF8FEB1E5D219C11D0
B6E867842DDFABA9B8501459BB3AE732C325875F61464616D54BB1FBD0CA9006
B67FC8C1BA7AEDF4F8F6BB9D4A3083F39B4C10208AD9320904638A13E15F9187
F72580D0228616DD26D67D2FCA3038BF92836E3D7F067E20E28C9E288683765D
C05FC435D2441502CDA6DBCD62B19F3654AA90521F9C44EB1EE24E48C907E84A
A636324C7DD55254D6530EC9E481676F516D034A24BA4FA16E847D120F614BA4
C8773750FA72F52526BE3F1CDFC15BA0A9A1D293BCADEDFCFD28A7EEFD2677B9
D68D853785C5C2388FACB6296B9E7C3AD81B896CF40D0117268182D900BB8C15
AB4D160B857AFF1F746F599BA3C1628B215BCC85359375F0A09FA55F96C101BB
129559926C4D66204FD0BAF5F69D1B758B1E2A647394B8EAF4FF42F817D1BD03
CBDEE859995065FC12E7A5261C1C6F9231C744CC6B1695B64FB0E8722681EB3D
847203F85B4039F09BB14895B6262EA3826197E10DDF5CA08C13108AEB7BA9E0
FB926C08D230AE4E739FF89F85605FB5503D582E970934BCCB1ED99D8A398509
9D1E37829166846BDED840C0DB82DFEA43A7D700AFD57F76B9507D7A1F58E02E
4F0AC75F36DB42C13E5760E731348824B0349640818328725C9C561DC692B3E0
455C4D18CB27B875275C90334A6B6CB9B8EB18F7C2F8250680814B6B26EAE1C3
6ABC9B6544992DCC10D1321942A312B9D3E01DDBD8D70826A60835F30EB49140
5C2A8E87A14720F44C57949DC0A09D8594148283CDD4528CA960FAF6FA03F85C
DB188779427BA96757EB199B958B249F80B79E521EAFA59BB3367BE4BD9FE8E0
C0CC462088C341FE61FEB8AB20524C7D451735395A9BD8477BEDC5833D541863
5FAEAB8A0046675AE16824DD84B67499F86DBEA95F5AFE3294AD20C65B1FA63D
3DABD5E17F78F498421B20363D7A46D0FE2677A29D8103FFBF8292F55BF44C10
82BED852DE6AD0D411722829619E4B2947AC158718D0DF51AD3D604E3275163B
EFE1175BF1CF8A23A1E2110582C0898C47026349BFD051855D73C50E1B2D1173
F78E29B1841E5B3B7E19A535D66030D19ADB8E195ECC7FEBD121A6F3F40DCA4D
C231914669CF3D2E04254D31A8C6354AFB981F92DF52EA4C310EE8D3941BAA1F
79AE5CA2C1F078029DFAF6E1B77A568942271BD12C4A597A92FBCBA833CCB35C
60C76F480CD20BCF431DFA50AB808BD1C24945318CC299BE7B1EA0F4AF69935C
4A62F7BAF2EFD782A2FEB60DEC9C0EF5CA8C1319BD805E1F6A2B9422BCE225F4
914B79D028CC18FDCD9D98814D0CEBAFE59375D4780E79EFF4CF19BC7D8FBF0E
F2A9AB3C5CF299EDF1FF620B5915C4160C1044DDA7C8455CAF996636AE38CC7A
CC6A9CF9AF766C7851538FA804AE515545DF0B6D6FDE90413345284FD105444F
3EBB65F82720281F7E66C6177E13C113A48A6AABCF48D57F2FF1C3F47D3392F3
6AD4B1BA1EE195B85B9D453DAED457200D2D9D2EF8485A48908EBEC389DA0B12
F7266FB1880634CDC887F9F50D21593C63135F74734A6745F627B9058574A432
3B70F8D5438F92F49CACEDFF9E13E90690A80D53F357B9FB05C6E5E31185F4AC
FA27FE7BA49AED9CBA835A4022DAE2A34EBB64339A859EBC0AB2EF34BC32B464
33CEC249BABF00A2B214F320E11D7BEFE7696E2FF1C54187FABBA7234C46718A
20EA724F1CCDD00AE7314F72219241723FA5964661C364DDCF37737F92B6999A
72A3A638FAFA0725F5EAD34BD00894A1277835AAA6E124E3393A23A08B29D19E
2AEA1CADD4F9F5734CAD0AD5CDD71ECD5F5D66EDF8A007C8C526FC9DFD0BC00C
6D365A21C5D6B35B5A7CD48DC1F2C7CF5AE9D790693924B7598291F50BD6B2AC
0AF054B3B29CFDBDFA33D3FB55825E8D909AB66888A597F89C786C971E6A411C
833282BC684CC6BEDEA6BBA17D7E93ABD796B113F434EF3EAC27D3F4E00DB826
2B8418AAB035E5B6E3329A6DD9DFB297B4499F225A57CF6A7B2C2359C1A0601C
AF615DA90DE6004899608A85E2455785E9E72920433596E95E272AB8F4610D62
BF12AA33084E576A67FBAA33EED34B1B19ABE592C0C9E901F4232C1C621C9B81
8768ACD6A468026406D2E8FD69A123EBA67AB086E9EB426953E8A63FA8E34287
1214FBA422B8A86D0B69EE6AA7F95315F13BA8EA6E926AEDE042F54E172D7B08
547ED7D32DB79CAB73252248305873D960B63D9183E7CA6D6CCDAF68A9690F2F
72C4CB6C64ECAD01B5C5525C3A1161B22E96FFA88F00BC4669479B8BE14E0F1B
A43D1D41919B67479047A8AFD87C18F10C08F26A5DD4AD25D2A444E3992C1351
F0EF59ED762A58264AD5F2C225EE1DA8351E025297985005A694F32A867D536B
7B423791F1778733BBE1B009AF1164B9BCC7B3B073BC2E086DC546AAB9317287
DD3BFC60CCF78BEA35BE4D42D1EEB24D475E0726E2523440A8FD5C88CE909A1B
D0E0FD678B1957E06CA299FAB166D02160DDF576C2D070A6B4CF0BF8AE9B2DE2
1BFFF925637BA71820CEFD75C5C2CCCF88EE7F21B8ACD31557D8C0938FB118A0
9A15484D761B6D5B623BB43A8DFF4990026FBD0538726250FD4C2AE9AE5622D4
F6EEA7BDE0872096D4E4DFE2752AE058D86C1284FF87DA57E57D63B5F4FBD3E4
FD5B4077FAB43134F5176DD706EB5791829714A1784989CE9F3B403A1B7DE5BB
B8E81E1068E241DEC8EB11C48E10E7656B1149A9F11515F4D0AE780AC7E03CF4
6B09EEE91732B309F73707B95EAFD31850462ABAA126932F20FD007D85332016
0556727AAA2A1DD4B1F687C623FC0D94D2592C64831489B7D01ACF64BF3BF85E
2973FD4E643C9D2344A2F1A5D1D4C2D567472B62DFAA0DAD626E272BE71ED22D
728E80E4A74D8E5C86EDCDB6657F2AC908DFEBAE9A43121E95457F059137FD73
948C52ADA591E3D6C1290E50F49409DB3B7DF2E6EBE4B8A1EC356090AE45371D
344CD85601EEB58FD94AB806E96E4BE8A1DD12BDB2CC1C3AFE36E8190F5FC347
B625B2D41B25594B8F865B6B59982B58B47AC913EA3A995A80EC08478592C85B
31092EE4C9A0980188B18CF58A8432138EE000FA061328CB3A30EAF569A27ECF
05D08E0254CA03CDC1EECBAE1EB424A1B54BBBCCF3505517127B6B2F1A3F2B7D
9000F828B03C52B33A9A18208CB349CC1F578A70F78C817CB245665A09F7698C
EA7015ACC6D9DAA27E5B0C2A1BEA0847DD7C9C5C5C77F5A031A854336C4D4E59
E8C124FA2D897EA0F3F60B638094386F5E059C3E6708F2D107846E5DB1D8BE35
285C2A2CF48C31A59932A6910A156E796781D66748E7FB2EE7FB57DC8EE8C9B3
FE8888A072A6F99C90B52FE0151EC3B656033AC27EF3C6D94401316CCDE28885
84AE38209C2791B0DD894B4A6CCBB6D9D25D6EB76B0C967E0D5706C95E33F9BE
92F1A44718050565118C1C3286D515B3B84D452BBEF7C873D4DA038912966860
90AD2042A390FC5A77A611C3E83E841C6FD66C026D07ED0F3674A47E524E0FE6
695840B775771D93BEDEC18A9EC270735E34339C5B88FDB6FD3CC8BAEBBC0A22
189F7C3DAAC8F1CA9FA9FB75D8F3AF453AA75D963A38F7D5D3020245B1DFCF3C
A130C956CBB233DCF7171DF5557EF42876F7CBA7A73E08509B6DE59DC2D11A1C
336F513C13208F8A36BD9AC4597856CF0E51CED6F8DC7FCB6E150E1631D2863F
A024138F6AF8AE3CF2274004E04F599F3C6B39258B9C233402777693559E6B89
E93268CA7B0228BA09E42EA67F04871A7B57DF383D4D3710F8406D98EDE45C28
9ABEFB7A8CA5B5A47FED79F3E8CAE4075C4D9DB746E3F592A082DE3A0586245F
E8DEEEFC8C79148259FA2E81EEBF948F274D79A4DC9D6D2FADF8762D79B833E4
A740FEFA8D9A7ED3A933D69CC58834F750FB7A3F090FEA01917381646104C4DE
B05A21D5C4F8C8AA1B3BB7CBC31846C64AB3064AA8B966A85807C8C9BD9142AC
E7FED0DD4DABB72F9FF1B65AC04224F2D1E3C242449B86BFB384C4956414FEC7
71E84EDC533A575B32E6A904BE540619296EBF74CD8646B0F77079A858F77CBA
E1A2C76317408EB66160476755D824FA4CAD0D88083D8407DE219D41242AEAB3
BEF404A3887023DF6286011679DCA31D3D09AF17FBE2F10C9CFAE6FEE74CC946
340A6C77313146D9E8D2617636738CF7D010AA0F86DC8F3EEAC3BD2E7A076B0F
49E00EEF96503DB819CB790FC14C7E53796C7C23B65683F9BA53CD0E70ED2C84
A2B8E1CF275D78D8E2EA166B8054ED5805F37883880C0B5BA1169377A6407BD0
894A596C938E4F1017B3CB54A4A0925C742026A418F7AE0C24D3F8674EFF6F8E
C4E4D9D6256FDA8057AB5E4AEE3B233F8163797283F964540BA0BA4E6A6D5FB6
7F0442CB2D76ED31D4C0567F91A4C15C85024E623750A53B09ED64498A0AEC7B
F7463E21F79AB55C8F5A54F429295E10FE8D173A38AF781298EA6E22B2AA7E35
5DDA3BAA0385EA7B42AA49693AF76599234B7322E4EBC3E0146DEB5DA8FBCC3F
69B00704352C292FA818438CF2967A4D28FB6F6CB92E5C13812C47D98D2851CE
D4602A39E8BF3E768EC76AEE3F10F868279524104FDFDE938C3816C3598BE91F
8858C06BE6BC1195448557B0A4DFDEBADC2FAFB08AA1EF98B64611B64B70063E
6D71D3C3D22FAB8AF8D51C4A3001DDB66E84010F097A7C8C4AB97A50576E22FB
9A2B5CC02AA7155BB8BF6A8845D04B89730F8998453F196836CA46C5F369AEDC
514A0B3C6E05102A415277887C031A6657244EA76EAD8F2DB5B044B86DC41D3E
472FF2664DF06CD7103597542B20BC10A8DC0EF87C4F5B9FEDA665FB534F607C
39B558276AFDC9FE1AB7D5CE4EE77880AF4ED734C77B5793821AEEEE54643E0B
3D034E8169CA0EF3B791827475E919F2DFD9E6D58B72CBCFDB85201E667C38CF
E92C7535B1539F95F86D028FC9F7ACC390973F02FA19ACCF2CD5D840A4DD01EE
9C322336A2B09FF81F684CDA99B838791BC9BF35F9FFE37C29954A5710F3A47E
C43769DB9DCED258935A5A9DBACB4C4A85EBBFAD2D50D8BA94D55A07A652EFDE
68806C9B0DA9B6A0844A8475E65173BD9000BDC719005A896A82178BE8E62B5E
A7DA859A47085D4398380A5E148195C2834D575BCB1BD26867F2695348BD0A47
20D55690A5DF3E58D6CD6C525E86E041A6DED9D55F7D24B81B0E33F25F8B10B6
E5C097D0AC54B133FEFBB9F0C883BB07BB99171CF78AF844F8463CC6DFCEC30F
E64DAC7CFE01EBCC4D6C68247678D3FF8473860D4D27B2F79C65515E5264EBFF
7229D4A7C6A500AEAFCBC060996045A3922E9C6DEE1E0409963BF121144C3038
D3B45A55A83AED902D02F4D687E0E4D1B2612CC49BAD1114F055ABC509EF80C5
1ED2D8333CAD8EFF2EF1A8A797508FE074FBD944A602152D8FC85E5EF40AE65B
81BDB35731E4F4E2B6EDBCE21779FF0BE72A197BD646D224D771AD6871D7B705
8AFC1D08AE5E01FB06F59E47A132149B26A3F12789841A5A1A0C1E73D33F816F
E21A5BAAD83F995A622DD1CFC78495A02770E487E3F07777D47E724B86E20814
C40090160D74E9DC1B3F3234135409F93A3621ED75587AE3D0E51B5679D41034
AF9E0E3AD453203F051A9A64F4D89A1DA793F5D7824BB7278686B2140356353B
EAB88D189B57C22303604E74F4E99B92AF4303E6E556182A34FE90E2E03451B9
6905A91DD8917A9A0855F0E1056786C4FA7BC557214BF980CE0CCBE3162BEDD6
97DC5F56CE2BD95BD5F365B6C9531696C4E6CB7F5202CFCE5816351B168E9288
50CE5844E7BDF561BFA49843C176307AC4BDDB0CDA62EB7EB5B51402E52BEBF5
B0AAE2F5E450D88851E40D12C2C3D504C2AF7E83375C50D763A7645BA5CC34CD
2B4F23B41EE8096495D0AE6F3EC3974F8684CAED6071B92E519934A80C7ACA72
B744D05DC1D7306EA6D64CB94B50C5C1A0AEC890C655EB3A82BE6FB677C2BE53
9ACDE795859A828B46CAA20B0E2FC8A8BFD8586A9A836758998713FCC775907A
4C9F93DD3D3A9F58E741C30D32B2F4756A006810ADA9B374DB113DBAF775859A
F0EAE2A2ED9AD2F82AE2733AF51EFD99E80080B9D6D42AC4EA2FFE2D6D0AA500
85FD0F2F9737E77D039C88CEE568DEDA44032EAB6F585E4E75D6880D086C1061
E6DD1C348A6DBB7B4633914137244A5ED2FEC9CF2B16A1C8DA227A4B3D432D1B
647F689A3D459BD8558CB28065B5B31371AC6EA155DD6065CBE5BA46CF24F861
26882F44930454E35728ED0ECA9690C0717CBF52629A2C933F8DDF061710140B
7082626976FC47AADC0CC3CDA65E81B711C5B308DE4B15BA37D932390889C813
B903F8282E2475C656208A0240763AC70F9144857AB96AB495524675883BFE02
F8CF44B62D6CADEBC30615E4337DA5E2B407A55275246B70B0DB554100E0DA75
E665FDF563D30C9EC48035E5C624856E92146342F1BF2C64CDD1CB1FB1B0A94A
EE3AECB968CBD5B84B8CCE94A35CDA7E29779485208C9DDA6CCF1A89CAFBD014
05C03C354FA826E998E7FEB42E5F92C25F77ABC9BC0E17A541A9D6D83CFD7AFC
445AD86E33964E9541F31C13BCEC92D0F90706486A02621C3C4BCB7ADDE14E3D
805F53A561BADCD782EC2453C76DA0E34D66FC198CB6D69FC3F09FC43E3FFDE9
5BEBDC1E5A262651D404197517DD7AC6CC2B3E627C31B85A754D465B4F368EF5
C11E6006E355FDE4C816F3F9F504A1A192AB37571941BEDFEF743012D1ECCBE7
1F621236112EB1492A646BF4BD71A743E8EF11E8691F2539B12949AAB2748290
AD2F3CA75DF1E9CF121E4E98273AE53A7D864F2C9EEB7B3FDF32B14E3EA27820
55CB90FF7558846BD5494F5578C76A88EDE1AFBE5AF9CA2CCE93E344BD6A9261
ACA959AFE78EE810907EFDB02615C14CB5168E78FB119EC95B3CD24AD0ACC677
B4B131263AF082EA38B0BBC4CDA2C5F3AD79F84FC21686B9F4834A7CEF565EF8
9769B6131B21C42F97102B7A040634F043C98B8488E6D58357534E6BC6C3B93B
F2AAA95FCAE9D744A140B0DEE0C5A70A074D0118465382B951D76713759EAD1B
30750A255F1670498964911F9A883137AEAF57286E78D8BB50573C68F48551AE
96C0638C5DD62FDF0AAF337D34F12266BCC5154AE9996404B4949FF37D9CC22D
1F645769C69DA69B4E1B135F83A6FAF78F3A43B9B0991D3C0D27C08C5FE1B48F
0FB781B3C84F8B5E20E7F44F849A042F6BD0801E353AAB99CCFFC8564ED37E02
FCABA06B196832F01B6A82485A2F43D279409A938BC2EA8A6621A37C25AADBBE
C17CFF9373E5175DC5FA9AF9DC2EDD92352712599ECAFEF013BCA316114C7C5F
754FA5329513ECA625CC1CF3EB45DB90ACBC68A588D5A5B633C17634D9DE50E0
6B1E22EAAEAD82A4408037814BF4381B5621D84E4F0E22398EF7722C6D42E934
3AAF7CFC8852FDAFF4A4B7C85756DA4400980F875283D8B27DAE7555F4F03CE5
10B95A3C3CF0DFB8D844D99B9C19770C51D5D6E1398048E5777EDCD716108B0E
5E793541CA70564263F27BD62633B23BDE9B3CF692614A3EBDB29545BD7BDF67
B7C5AB7E99E12DAFC207F82CCD82F7EF62FE4C3EA3113C3D7C23E0F995190A11
FC9CDC3E3EB6D9465D9995B7F3229ECB6D2E89C7044DAC2CA030F3731488E9A8
0679E6FDE1671530FEE740B61FEB489AB1D55A333A03224465EC27B8B48435D7
54C39B5C48EF086B677F41D8BD3C7C60E157C5A62030076E4FFECB6BDEA83958
D0B8ED6814370D91098A34F28363DBCC5861D6AB15B0BD2293B62B4BB26C7DE3
8425D8520C364FDA1B20B7B16C01AE92C518C514DA624027EE9AAE2000BACDF4
DF64DC5C9B2CD991444AD3864F89B2CE0B07029BBD45A3407A477D1AEBB12E3C
54F8DB4EC96332A79E6D027C9E80F85A8AF5EAC6F12FD20065A94F6530855CF8
0FDB47C3B079E71B1DE2E62BAE54A8EB1F6FC2067D9DEDF7705A2250DD83155B
598B35CBEF4430E441B2C8D90727B191FE29AED4D6513BC108FBD4B1B7E0041E
F62AB63952AA1E689DC117A499745ED270FA9E63BA4166E0CFBDFD01032AF7CE
5A173BE0DB4B8EADEC030407814E9B41F779578BD3E54297CA8B0B1E30A03CE7
68A76F5112C2B4CA3D14BF18628FCDC96983AF8F0D67F66F2848D6BA12242291
4FDEC0246C9C16CDE519F3F4F0BC1113E865D463EC972E52406DD2EAAE5F29B8
5A89D45BB43D9934B85214FFBD76183F1EB955E5F5771E93CC97D7F0FA21DB53
CCACD6BE996FC775ACB7EAF174EFB21B23E4AC6E6724F78489C647E974EED311
9E5B92B8825F6C703E4346CAEE0392214B50B261B8242FE5EA0A9F529FF8A0CD
C64213535D0955708C6A1FB4AB50C887EAA3AB97E6644457F80302E5F0C9D8A6
DEC5751E6284E67B3266DD8FE1F1CA6AC24862C23B9215591B8BA573F4FB54AF
C568AF5E3BE01B1028A9A28E31E416ACAF93BA2993B00EB56EACA2EDFF500409
889BBCE8993476595BDC3B7A0925734C809E0BC43B3E81D99D7C05E52BA2EF54
56620ABE871ECC83EAE4EB4A42378D3A8496AF78ED87AAA3D6A83583CC4B5314
BA8AEBC1A9325C33BDEA389AEFA6ECDD4B1D56ADECA17293089950B2DC240AC9
D25BCCC3DA0CC04B55AA46984A9D3F81069F111C0753B33A3DF6EDE71A44CAAA
CE67A7C3F07D46E72A05D50FC13D337535D8A44B64266E379A9F26A615A30554
9750AC72268E95A0361846ACF6E9312CB2A55A5A9FDBE339349C2062737E4DC2
AD6EEB054462CA25D69387EEB2168182E9F6CD83B2856CB14C0B694542C77262
3E60885B778FBE5D458A5A8F229AF64F40019680D6AD989D8C6ACBDF59F7292B
1A55DE001792C18A8A18C3BE8B5E55373918094AF57D78521A2735DC9AB24081
C84B731C8B30AE7A77C12F2175509130F3F6557F29EEE84D0D148E770C4B6009
D5720771141ED417304C5BF92D97324F5A8A0522B462D487490CC56293D19FA7
793AF7D813CC4130AD733DDFC4B4A2649607AA1A2C69E9C41457F6C01D2F48DC
31BCF33AC08DB6B212CB7F04355A20FC944DB9C3008E3323A5A450EB85F43E40
4AE3398BD0D537C744E832553504316177526BF84ADF7EA8F83FF43EB641D7B6
836202FB66FE0FCE4B0E829C850D6836DF19CFACC2C3DC16268878DB8C62A20C
06A84FA4A9939C6BA86848B91CFB0B14927D1595AD540A535ACB7D6629C08DE5
9030A4BF4A12F3D67CDCF86579FAFDC0006180BE85730AAEA62FAB07EEE61674
A7F94458AB13C1BA52765F3B55B4712CB50F1E21D5275369BEA99348E7AE1F3F
51ECC031E34D40BCB2A5885F4F936BEE6D07B68186035577DB3FE3B8F1BDC620
E1D5C9E0A0465E454472836BF2EB12FCEEF1D9558C1DB89CC2344B6854F70E46
2D34A22891511D217570D8CE13DEBCD5060708B1CCC0066047253D42A76A0037
D86D51CFE1BF129B5F496BA6F1477AC80A0F307B3E71E35D87AE480739F76351
D66E06874AD3F991D779A88D6D3605A77F91461FD24ABD408877470A5288AC22
23E1020B851E092C30763EC11B46052D64D2B1C3F865D15A284989AE132627C7
24E337FABCAFE9B9FB75E85B2AC77D0170F522E371362C10D2192FB51DF2AFF8
951D348E471F251B6DF6415886DC236B2D98B242836CB19170768DD4A7596D27
F5755E585BDA924B350B139127EF4DFCA11A16FA705327DCB4408299081F2F19
4919CE681D6F39EACAFFA934EFD84EAADBF98C58D0C6644C86284106804BFE85
F20B86D06AA5691C98988193A667F44E1A46F5E0A89F056D01DBE09C2AC026D7
D20BB79EA91E2DBA0725A07D0691F3121337D116897279B31C25543782438383
A38A4F2902DBFB951A236F8CA55D6636ED01C921917CC6BA45261149F9CD6630
65D40B4BC18551F3380796EE4DEF3F2618617EA0F7D6D0057E5C9D96BC065A56
A4305AF47BF3E7FD49BBDEFCCAB671B440AD038395302D3818E25B1617560690
4E18C6F9DB1FBD691C69C2E8D608456F29C7F8D78D77838671A26F8C1C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (crime_on_gdp.dvi)
@start /Fa 134[44 44 60 44 46 32 33 33 1[46 42 46 69
23 2[23 46 42 25 37 46 37 1[42 16[57 5[43 2[65 54 1[63
14[42 4[42 1[23 1[23 6[69 37[{}31 83.022 /CMR10 rf /Fb
205[33 33 49[{}2 58.1154 /CMR7 rf /Fc 139[46 58 60 14[64
64 71 31[103 65[{}7 119.552 /CMBXTI10 rf /Fd 134[53 1[72
53 55 39 39 43 2[50 55 1[28 53 1[28 55 50 1[46 55 44
1[48 9[103 4[76 4[95 60 2[40 4[76 72 3[47 8[50 50 50
50 50 50 49[{}32 99.6264 /CMB10 rf /Fe 139[32 40 41 3[55
1[25 45 1[30 1[45 1[45 1[45 45 50 13[55 6[61 1[51 2[75
1[66 3[72 7[50 50 1[50 50 4[50 1[30 35 45[{}25 99.6264
/CMTI12 rf /Ff 139[27 11[39 53[35 35 49[{}4 66.4176 /CMR8
rf /Fg 133[43 51 51 70 51 54 38 38 38 51 54 49 54 81
27 51 30 27 54 49 30 43 54 43 54 49 6[60 2[100 73 73
70 54 72 76 66 76 73 89 61 2[35 73 77 64 66 75 70 69
73 1[46 4[27 3[49 49 49 49 49 49 49 49 27 33 27 2[38
38 2[81 22[81 54 54 57 11[{}68 99.6264 /CMR12 rf /Fh
134[76 76 104 76 80 56 57 61 1[80 72 80 120 40 2[40 80
72 44 67 80 64 80 70 12[100 1[109 4[136 86 2[57 2[90
94 110 104 1[108 10[72 72 72 72 72 72 49[{}38 143.462
/CMB10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 186 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 186 0 a 186 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 186 0 a
364 -248 a
SDict begin H.S end
 364 -248 a 364 -248 a
SDict begin H.R end
 364 -248 a 364 -248
a
SDict begin [/View [/XYZ H.V]/Dest (page.i) cvn /DEST pdfmark end
 364 -248 a 0 TeXcolorgray Black 0 TeXcolorgray 186
67 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 186 67 a 186 67 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 186 67 a 186 67 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 186 67 a 186
67 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 186 67 a 186 67 a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Introduction) /OUT
pdfmark end
 186 67 a 186 67 a
SDict begin [/Count -0/Dest (section.2) cvn/Title (Literature Review)
/OUT pdfmark end
 186 67 a 186
67 a
SDict begin [/Count -0/Dest (section.3) cvn/Title (Methodology) /OUT
pdfmark end
 186 67 a 186 67 a
SDict begin [/Count -0/Dest (section.4) cvn/Title (Data) /OUT pdfmark
end
 186 67 a 186 67 a
SDict begin [/Count -0/Dest (section.5) cvn/Title (Results) /OUT pdfmark
end
 186 67 a 186
67 a
SDict begin [/Count -0/Dest (section.6) cvn/Title (Conclusion) /OUT
pdfmark end
 186 67 a 186 67 a
SDict begin [/Count -0/Dest (section.6) cvn/Title (Works cited) /OUT
pdfmark end
 186 67 a 186 67 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 186 67 a 186
67 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 186 67 a 186 67 a
SDict begin H.S end
 186 67 a 186 67 a
SDict begin 18.125 H.A end
 186 67 a 186
67 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 186 67 a 186 67 a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</S/r>>1<</S/r>>2<</S/D>>]>>>>
/PUT pdfmark end
 186 67 a 0 TeXcolorgray 0 TeXcolorgray
1246 908 a Fh(Economic)46 b(Cost)g(of)h(Crime)1763 1767
y Fg(T)-8 b(erm)33 b(P)m(ap)s(er)874 1917 y(Prof.)43
b(Dr.)g(Nora)32 b(Markw)m(alder)h(and)g(Dr.)42 b(Monik)-5
b(a)32 b(Simmler)1628 2068 y(Criminology)g(Class)1579
2337 y(Decem)m(b)s(er)h(20)2130 2300 y Ff(th)2200 2337
y Fg(,)g(2020)p 0 TeXcolorgray 0 TeXcolorgray 3224 5446
a Fe(Erik-Jan)h(Senn)3275 5596 y(L)-5 b(anggasse)33 b(56)3164
5747 y(9008)i(St.)44 b(Gal)5 b(len)p 0 TeXcolorgray 0
TeXcolorgray eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 TeXcolorgray 186 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 186 0 a
364 -248 a
SDict begin H.S end
 364 -248 a 364 -248 a
SDict begin H.R end
 364 -248 a 364 -248
a
SDict begin [/View [/XYZ H.V]/Dest (page.i) cvn /DEST pdfmark end
 364 -248 a 0 TeXcolorgray 0 TeXcolorgray 186 167 a
SDict begin H.S end

186 167 a 186 167 a
SDict begin 27.5 H.A end
 186 167 a 186 167 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 186 167 a Fh(Con)l(ten)l(ts)186
416 y
SDict begin H.S end
 186 416 a Fd(1)96 b(In)m(tro)s(duction)885 416
y
SDict begin 18.125 H.L end
 885 416 a 885 416 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 885 416 a 2913 w Fd(1)186 664 y
SDict begin H.S end

186 664 a Fd(2)g(Literature)33 b(Review)1133 664 y
SDict begin 18.125 H.L end
 1133
664 a 1133 664 a
SDict begin [/Subtype /Link/Dest (section.2) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1133 664 a 2665 w Fd(2)186 912 y
SDict begin H.S end
 186
912 a Fd(3)96 b(Metho)s(dology)906 912 y
SDict begin 18.125 H.L end
 906 912 a 906
912 a
SDict begin [/Subtype /Link/Dest (section.3) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 906 912 a 2892 w Fd(2)186 1160 y
SDict begin H.S end
 186 1160 a Fd(4)g(Data)543
1160 y
SDict begin 18.125 H.L end
 543 1160 a 543 1160 a
SDict begin [/Subtype /Link/Dest (section.4) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 543 1160 a 3255 w Fd(2)186
1408 y
SDict begin H.S end
 186 1408 a Fd(5)g(Results)654 1408 y
SDict begin 18.125 H.L end
 654 1408
a 654 1408 a
SDict begin [/Subtype /Link/Dest (section.5) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 654 1408 a 3144 w Fd(3)186 1656 y
SDict begin H.S end
 186 1656
a Fd(6)g(Conclusion)808 1656 y
SDict begin 18.125 H.L end
 808 1656 a 808 1656 a
SDict begin [/Subtype /Link/Dest (section.6) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end

808 1656 a 2990 w Fd(3)186 1904 y
SDict begin H.S end
 186 1904 a Fd(W)-8
b(orks)32 b(cited)710 1904 y
SDict begin 18.125 H.L end
 710 1904 a 710 1904 a
SDict begin [/Subtype /Link/Dest (section.6) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 710
1904 a 3088 w Fd(4)186 2282 y
SDict begin H.S end
 186 2282 a 186 2282 a
SDict begin 27.5 H.A end
 186
2282 a 186 2282 a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 186 2282 a Fh(List)47 b(of)g(T)-12
b(ables)186 2660 y
SDict begin H.S end
 186 2660 a 186 2660 a
SDict begin 27.5 H.A end
 186 2660 a 186
2660 a
SDict begin [/View [/XYZ H.V]/Dest (section*.3) cvn /DEST pdfmark end
 186 2660 a Fh(List)47 b(of)g(Figures)p 0 TeXcolorgray
2003 6104 a Fg(i)p 0 TeXcolorgray eop end
%%Page: 1 3
TeXDict begin 1 2 bop 0 TeXcolorgray 186 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 186 0 a
364 -248 a
SDict begin H.S end
 364 -248 a 364 -248 a
SDict begin H.R end
 364 -248 a 364 -248
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 364 -248 a 0 TeXcolorgray 0 TeXcolorgray 186 167 a
SDict begin H.S end

186 167 a 186 167 a
SDict begin 22.5 H.A end
 186 167 a 186 167 a
SDict begin [/View [/XYZ H.V]/Dest (section*.4) cvn /DEST pdfmark end
 186 167 a Fc(A)m(bstr)-7
b(act)186 382 y Fe(A)n(bstr)i(act)186 531 y
SDict begin H.S end
 186 531 a
186 531 a
SDict begin 18.125 H.A end
 186 531 a 186 531 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 186 531 a 229 x Fh(1)143
b(In)l(tro)t(duction)186 1009 y Fg(Economic)27 b(cost)f(of)g(crime)h
(are)f(an)m(y)g(cost)h(asso)s(ciated)f(with)h(the)f(prev)m(en)m(tion)h
(or)f(the)g(consequences)186 1159 y(of)e(criminal)h(activities)h(and)f
(is)g(usually)h(measured)g(in)f(monetary)g(units.)41
b(This)26 b(general)f(de\014nition)186 1310 y(can)33
b(re\014ned)g(in)g(tangible)f(and)g(in)m(tangible/so)s(cietal)h
(economic)g(cost)g(of)f(crime.)44 b Fd(?)351 1460 y Fg(An)32
b(detailed)f(estimation)h(of)f(crime)h(cost)f(could)h(b)s(e)f(used)h
(to)f(ev)-5 b(aluate)31 b(justice)i(p)s(olicy)e(using)186
1611 y(cost)j(and)g(b)s(ene\014t)h(analysis.)49 b(T)-8
b(ak)m(e)35 b(this)f(simple)h(question)g(as)f(an)g(example:)48
b(Is)34 b(it)g(pro\014table)g(to)186 1761 y(in)m(tro)s(duce)40
b(p)s(olice)f(patrols)g(in)g(cities)h(at)f(nigh)m(t?)64
b(The)40 b(question)g(could)g(b)s(e)f(answ)m(ered)i(from)e(an)186
1912 y(economic)g(p)s(ersp)s(ectiv)m(e)g(if)f(estimates)h(for)e(the)h
(follo)m(wing)g(asp)s(ects)h(are)f(a)m(v)-5 b(ailable:)54
b(\(1\))37 b(cost)h(for)186 2062 y(p)s(olice)33 b(patrols,)g(\(2\))g(c)
m(hanges)h(in)f(prev)m(en)m(ted,)i(detected)f(and)f(committed)h(crimes)
g(due)g(to)e(p)s(olice)186 2213 y(patrols)41 b(and)h(\(3\))f(economic)h
(cost)g(of)g(crime)g(for)f(eac)m(h)i(individual)f(crime)g(that)f(is)h
(a\013ected)h(b)m(y)186 2363 y(p)s(olice)27 b(patrols.)41
b(If)28 b(that)e(is)i(the)f(case,)i(w)m(e)g(could)e(ev)-5
b(aluate)27 b(the)h(question)g(b)m(y)g(comparing)f(the)g(cost)186
2514 y(of)37 b(the)h(measure)h(\(1\))e(and)h(the)g(b)s(ene\014ts)h(of)e
(the)h(measure)h(\(com)m(bine)g(\(2\))e(and)h(\(3\)\).)58
b(Ho)m(w)m(ev)m(er,)186 2664 y(apart)29 b(from)g(\(1\))g(whic)m(h)i
(mainly)g(consists)g(of)e(direct)h(cost,)h(it)e(is)i(hard)e(to)g
(\014nd)i(su\016cien)m(t)g(data)e(for)186 2815 y(estimate)38
b(\(2\))f(and)g(\(3\).)57 b(Unit)38 b(crime)g(costing)f(metho)s(ds)h
(as)g(describ)s(ed)g(in)g(Section)3404 2815 y
SDict begin H.S end
 3404 2815
a 0 TeXcolorgray Fg(2)p 0 TeXcolorgray 3452 2749 a
SDict begin H.R end
 3452
2749 a 3452 2815 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (section.2) cvn H.B /ANN pdfmark end
 3452 2815 a 38 w Fg(estimate)186 2965
y(the)g(cost)h(of)f(an)g(individual)h(crime)f(as)h(required)g(for)f
(\(3\),)h(but)f(results)h(sho)m(w)g(a)f(high)g(v)-5 b(ariation)186
3115 y(in)31 b(cost)h(and)g(are)f(mainly)h(a)m(v)-5 b(ailable)31
b(for)g(the)g(US.)h(Ov)m(erall,)g(the)g(idea)f(of)g(using)h(cost)g(and)
f(b)s(ene\014t)186 3266 y(analysis)j(for)e(justice)i(p)s(olicy)f(ev)-5
b(aluation)33 b(is)g(often)g(not)f(feasible)i(b)s(ecause)g(esp)s
(ecially)g(in)m(tangible)186 3416 y(cost)f(of)f(crime)h(are)f(hard)h
(to)f(measure.)351 3567 y(T)-8 b(o)46 b(b)s(e)g(able)g(to)f(estimate)h
(economic)h(cost)f(of)f(crime)h(empirically)-8 b(,)50
b(I)c(in)m(tro)s(duce)g(broader)186 3717 y(estimation)c(approac)m(hes)g
(for)f(cost)h(of)f(crime)h(that)f(require)h(less)h(detailed)f(data.)69
b(Sp)s(eci\014cally)-8 b(,)186 3868 y(the)45 b(empirical)g(analyses)h
(of)e(this)h(pap)s(er)g(is)g(based)h(on)e(the)h(idea)g(of)f(\()p
Fd(?)p Fg(\))80 b(and)45 b(tests)g(if)g(crime)186 4018
y(rates)d(negativ)m(ely)i(impact)e(GDP-gro)m(wth)f(of)h(coun)m(tries)h
(in)f(Europ)s(e.)73 b(The)43 b(metho)s(d)f(do)s(es)h(not)186
4169 y(estimate)26 b(crime)g(cost)g(on)f(a)g(case-lev)m(el,)j(but)d
(uses)i(aggregated)d(crime)i(and)f(other)g(data)g(to)g(explain)186
4319 y(di\013erences)42 b(in)e(economic)g(outcome.)66
b(Compared)40 b(to)g(the)g(question-sp)s(eci\014c)i(analysis)e
(earlier,)186 4470 y(economic)c(outcome)f(v)-5 b(ariables)35
b(are)g(also)g(impacted)h(b)m(y)g(non-crime)f(related)g(factors)g(that)
g(need)186 4620 y(to)29 b(b)s(e)h(con)m(trolled)g(for)e(and)i(are)f(a)g
(more)h(noisy)g(measure)h(of)e(a)g(p)s(oten)m(tial)g(e\013ect.)43
b(Also,)30 b(this)g(more)186 4771 y(general)25 b(analysis)g(reduces)i
(the)e(usabilit)m(y)g(of)g(the)g(analysis)g(for)g(p)s(olicy)g(ev)-5
b(aluation)24 b(b)s(ecause)i(man)m(y)186 4921 y(macro-v)-5
b(ariables)34 b(cannot)f(b)s(e)i(directly)g(in\015uenced)g(b)m(y)g(an)f
(institution.)2901 4921 y
SDict begin H.S end
 2901 4921 a -36 x Ff(1)2940
4921 y
SDict begin 18.125 H.L end
 2940 4921 a 2940 4921 a
SDict begin [/Subtype /Link/Dest (Hfootnote.1) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2940 4921 a 49 w Fg(Quan)m(ti\014ed)g
(e\013ects)h(in)186 5072 y(terms)e(of)e(o)m(v)m(erall)h(economic)h(v)-5
b(ariables)32 b(are)g(hard)f(to)h(in)m(terpret)g(as)g(an)g(absolute)g
(n)m(um)m(b)s(er)3603 5072 y
SDict begin H.S end
 3603 5072 a -36 x Ff(2)3642
5072 y
SDict begin 18.125 H.L end
 3642 5072 a 3642 5072 a
SDict begin [/Subtype /Link/Dest (Hfootnote.2) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3642 5072 a Fg(,)g(but)186
5222 y(they)h(can)g(b)s(e)f(compared)h(cross-sectionally)-8
b(.)351 5373 y(The)48 b(pap)s(er)f(is)h(organized)f(as)g(follo)m(ws:)73
b(Section)2297 5373 y
SDict begin H.S end
 2297 5373 a 0 TeXcolorgray Fg(2)p
0 TeXcolorgray 2346 5308 a
SDict begin H.R end
 2346 5308 a 2346 5373 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (section.2) cvn H.B /ANN pdfmark end
 2346
5373 a 47 w Fg(giv)m(es)48 b(an)f(o)m(v)m(erview)i(of)e(the)h(existing)
p 0 TeXcolorgray 186 5460 1465 4 v 298 5521 a Fb(1)335
5551 y
SDict begin H.S end
 335 5551 a 335 5551 a
SDict begin H.R end
 335 5551 a 335 5551 a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.1) cvn /DEST pdfmark
end
 335
5551 a Fa(Justice)41 b(system)f(c)n(haracteristics)e(that)j(are)e
(easier)h(to)g(impact)h(suc)n(h)f(the)h(share)f(of)g(prisoners)f(or)h
(p)r(olice)186 5676 y(exp)r(enditure)27 b(w)n(ould)g(giv)n(e)g(a)g
(more)g(direct)g(in)n(terpretation)f(and)h(enhance)g(the)h(relev)-5
b(ance)26 b(of)h(the)h(analysis.)298 5753 y Fb(2)335
5783 y
SDict begin H.S end
 335 5783 a 335 5783 a
SDict begin H.R end
 335 5783 a 335 5783 a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.2) cvn /DEST pdfmark
end
 335
5783 a Fa(F)-7 b(or)27 b(example,)g(it)h(is)f(unclear)g(if)h(an)f
(increase)f(of)i(0.5\045)e(of)i(GDP)f(is)h(high)f(or)g(not.)p
0 TeXcolorgray 0 TeXcolorgray 1992 6104 a Fg(1)p 0 TeXcolorgray
eop end
%%Page: 2 4
TeXDict begin 2 3 bop 0 TeXcolorgray 186 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 186 0 a
364 -248 a
SDict begin H.S end
 364 -248 a 364 -248 a
SDict begin H.R end
 364 -248 a 364 -248
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 364 -248 a 0 TeXcolorgray 0 TeXcolorgray 186 167 a
Fg(literature)25 b(for)f(crime-costing)h(metho)s(ds)h(and)f(more)g
(broad)f(analysis)i(approac)m(hes)g(suc)m(h)g(as)f(in)g(this)186
317 y(pap)s(er.)47 b(Section)844 317 y
SDict begin H.S end
 844 317 a 0 TeXcolorgray
Fg(3)p 0 TeXcolorgray 892 252 a
SDict begin H.R end
 892 252 a 892 317 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (section.3) cvn H.B /ANN pdfmark end
 892
317 a 34 w Fg(in)m(tro)s(duces)35 b(the)f(empirical)g(metho)s(d,)h
(Section)2717 317 y
SDict begin H.S end
 2717 317 a 0 TeXcolorgray Fg(4)p
0 TeXcolorgray 2766 252 a
SDict begin H.R end
 2766 252 a 2766 317 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (section.4) cvn H.B /ANN pdfmark end
 2766
317 a 34 w Fg(the)f(data)f(used.)48 b(Section)3799 317
y
SDict begin H.S end
 3799 317 a 0 TeXcolorgray Fg(5)p 0 TeXcolorgray 3847
252 a
SDict begin H.R end
 3847 252 a 3847 317 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (section.5) cvn H.B /ANN pdfmark end
 3847 317 a 186 468 a Fg(presen)m(ts)34
b(the)f(empirical)g(results)h(and)e(Section)1993 468
y
SDict begin H.S end
 1993 468 a 0 TeXcolorgray Fg(6)p 0 TeXcolorgray 2042
403 a
SDict begin H.R end
 2042 403 a 2042 468 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (section.6) cvn H.B /ANN pdfmark end
 2042 468 a 32 w Fg(concludes.)186
637 y
SDict begin H.S end
 186 637 a 186 637 a
SDict begin 18.125 H.A end
 186 637 a 186 637 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 186 637
a 209 x Fh(2)143 b(Literature)47 b(Review)186 1095 y
Fg(more)33 b(close)g(de\014nition)g(of)f(cost)h(of)e(crime)351
1245 y(Cost)i(estimates)h(US)f(\(an)m(ything)f(for)g(EU?\))351
1396 y(Imp)s(ortan)m(t)g(outcomes:)44 b(not)32 b(n)m(um)m(b)s(er)i(of)e
(cases,)i(but)e(t)m(yp)s(e)h(of)f(cases)i(relev)-5 b(an)m(t)351
1546 y(Idea)33 b(of)f(summing)h(up)g(the)g(cost)g(to)f(an)g(o)m(v)m
(erall)h(share?)186 1716 y
SDict begin H.S end
 186 1716 a 186 1716 a
SDict begin 18.125 H.A end
 186
1716 a 186 1716 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 186 1716 a 209 x Fh(3)143 b(Metho)t(dology)186
2174 y Fg(Goal:)46 b(not)34 b(a)g(mo)s(del)g(for)g(gdp,)g(but)h(try)f
(to)g(see)h(if)f(v)-5 b(ariation)34 b(in)g(gdp)g(can)h(ha)m(v)m(e)g(an)
m(ything)g(to)f(do)186 2324 y(\(mo)s(deling)e(gdp)h(is)g(generally)f
(hard)351 2475 y(What)h(to)f(use)h(as)g(y-v)-5 b(ariable?)43
b(BIP:)33 b(problem)g(-)e(excludes)k(illegal)d(activit)m(y)i(b)m(y)f
(de\014nition.)351 2625 y(Whic)m(h)28 b(crime)f(measures?)42
b(all)26 b(crime)h(rates)g(separately)-8 b(,)28 b(then)f(test)f(join)m
(tly)h(PCA)g(index)g(idea)186 2776 y(-)32 b(just)h(see)g(what)g(happ)s
(ens)351 2926 y(Causal)i(Mo)s(del)f(Idea)g(Causal:)47
b(4)34 b(assumptions.)48 b(P)m(anel)35 b(Data)e(Fixed)h(e\013ects.)49
b(Confounder)186 3077 y(description:)351 3227 y(P)m(oten)m(tial)39
b(issues:)57 b(missing)39 b(confoudners)g(-)f(factors)g(that)g
(di\013er)g(in)g(eu)h(coun)m(tries)h(are)e(not)186 3378
y(explained)29 b(b)m(y)g(confounders)g(and)f(not)g(constan)m(t)h(o)m(v)
m(er)g(time)g(high)f(v)-5 b(ariance)29 b(of)e(mo)s(del)i(\(gdp)f(hard)
186 3528 y(to)k(explain\))h(rev)m(erse)h(causalit)m(y)g(no)e
(su\016cien)m(t)i(heterogeneit)m(y)g(in)f(crime)g(rates)f(accross)i
(europ)s(e)186 3703 y
SDict begin H.S end
 186 3703 a 186 3703 a
SDict begin 18.125 H.A end
 186 3703
a 186 3703 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 186 3703 a 203 x Fh(4)143 b(Data)186 4155
y Fg(Aim:)44 b(estimate)33 b(in)f(EU)351 4306 y(IN)h(SWITZERLAND:)351
4456 y(F)-8 b(or)28 b(example,)i(in)f(Switzerland)h(the)f(cost)g(for)e
(only)i(the)g(p)s(enal)g(system)h(can)f(only)g(1)f(bill)h(\(also)186
4607 y(a)j(request)351 4757 y(0.22\045)39 b(of)h(GDP)f(\(gross)g
(domestic)i(pro)s(duct\))e(is)h(sp)s(end)h(on)e(the)h(court)g(system)h
(In)f(2014)f(a)186 4908 y(request)34 b(from)e(the)g(Christian)h(Demo)s
(cratic)f(P)m(art)m(y)h(\(CVP\))g(to)f(the)h(Swiss)h(parliamen)m(t)e
(ask)m(ed)i(to)186 5058 y(in)m(v)m(estigate)k(the)f(economic)g(cost)g
(of)f(crime)h(in)f(order)h(to)f(mak)m(e)h(more)g(e\016cien)m(t)h(in)m
(v)m(estmen)m(ts)h(in)186 5209 y(prev)m(en)m(tion)34
b(and)f(the)g(justice)h(system.)46 b(The)33 b(request)h(w)m(as)g
(turned)f(do)m(wn)h(due)f(to)f(the)h(high)g(cost)186
5359 y(to)f(conduct)h(the)g(analysis.)p Fd(?)p Fg(.)351
5510 y(IN)g(EU:)g(no)f(detailed)h(data)351 5660 y(Requiremen)m(ts)i
(for)d(data,)g(w)m(eaknesses)p 0 TeXcolorgray 1992 6104
a(2)p 0 TeXcolorgray eop end
%%Page: 3 5
TeXDict begin 3 4 bop 0 TeXcolorgray 186 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 186 0 a
364 -248 a
SDict begin H.S end
 364 -248 a 364 -248 a
SDict begin H.R end
 364 -248 a 364 -248
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 364 -248 a 0 TeXcolorgray 0 TeXcolorgray 186 67 a
SDict begin H.S end
 186
67 a 186 67 a
SDict begin 18.125 H.A end
 186 67 a 186 67 a
SDict begin [/View [/XYZ H.V]/Dest (section.5) cvn /DEST pdfmark end
 186 67 a 100 x Fh(5)143
b(Results)186 265 y
SDict begin H.S end
 186 265 a 186 265 a
SDict begin 18.125 H.A end
 186 265 a 186
265 a
SDict begin [/View [/XYZ H.V]/Dest (section.6) cvn /DEST pdfmark end
 186 265 a 229 x Fh(6)g(Conclusion)p 0 TeXcolorgray
1992 6104 a Fg(3)p 0 TeXcolorgray eop end
%%Page: 4 6
TeXDict begin 4 5 bop 0 TeXcolorgray 186 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 186 0 a
364 -248 a
SDict begin H.S end
 364 -248 a 364 -248 a
SDict begin H.R end
 364 -248 a 364 -248
a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 364 -248 a 0 TeXcolorgray 0 TeXcolorgray 186 167 a
SDict begin H.S end

186 167 a 186 167 a
SDict begin 27.5 H.A end
 186 167 a 186 167 a
SDict begin [/View [/XYZ H.V]/Dest (section*.5) cvn /DEST pdfmark end
 186 167 a Fh(App)t(endix)p
0 TeXcolorgray 1992 6104 a Fg(4)p 0 TeXcolorgray eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
